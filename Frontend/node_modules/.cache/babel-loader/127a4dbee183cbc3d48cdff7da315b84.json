{"ast":null,"code":"export const average = (type, info) => {\n  console.log(type);\n  let number = 0;\n  let total = 0;\n  let bandCounter = {\n    15000: 0,\n    25000: 0,\n    50000: 0,\n    100000: 0,\n    250000: 0,\n    500000: 0,\n    750000: 0,\n    1000000: 0,\n    2000000: 0\n  };\n  info.forEach(business => {\n    business.loans.forEach(loan => {\n      if (loan.type === type) {\n        total += loan.amount;\n        number += 1;\n      }\n\n      let bands = Object.keys(bandCounter);\n      if (loan.amount >= 15000 && loan.amount < 25000) bandCounter[15000] += 1;else if (loan.amount >= 25000 && loan.amount < 50000) bandCounter[25000] += 1;else if (loan.amount >= 100000 && loan.amount < 250000) bandCounter[100000] += 1;else if (loan.amount >= 250000 && loan.amount < 500000) bandCounter[250000] += 1;else if (loan.amount >= 500000 && loan.amount < 750000) bandCounter[500000] += 1;else if (loan.amount >= 750000 && loan.amount < 1000000) bandCounter[750000] += 1;else if (loan.amount >= 1000000 && loan.amount < 2000000) bandCounter[1000000] += 1;else if (loan.amount >= 2000000) bandCounter[2000000] += 1;\n    });\n  });\n  let averageLoan = total / number;\n  return [averageLoan, total, bandCounter, info];\n}; // export let specificLoanBands = (amount, minAmount, maxAmount)=>{\n//         let counter = 0;\n//         if(amount<=maxAmount && amount>= minAmount){\n//             counter+=1;\n//         }\n//         return counter;\n//     }\n\nlet items = [{\n  itemName: 'item1',\n  tags: [{\n    id: 'tag1',\n    name: 'Tag 1'\n  }, {\n    id: 'tag2',\n    name: 'Tag 2'\n  }]\n}, {\n  itemName: 'item2',\n  tags: [{\n    id: 'tag1',\n    name: 'Tag 1'\n  }, {\n    id: 'tag3',\n    name: 'Tag 3'\n  }]\n}];\nlet companies = [{\n  _id: \"5f404639c76eb722b9e184d3\",\n  name: \"David\",\n  loans: [{\n    _id: \"5f404639c76eb722b9e184d2\",\n    amount: 787098,\n    type: \"Buy another business\",\n    otherType: \"\"\n  }]\n}]; //   export const loanAmounts = companies.reduce((acc, company)=>{\n//       let loans = company.loans.reduce((acc2, loan) => {\n//         return [...acc2, loan.amount]\n//       },[]);\n//       return [...acc, loans]\n//   }, []).flat();\n\nexport const loanBandCounter = companies => {\n  let bandCounter = {\n    15000: 0,\n    25000: 0,\n    50000: 0,\n    100000: 0,\n    250000: 0,\n    500000: 0,\n    750000: 0,\n    1000000: 0,\n    2000000: 0\n  };\n  let bands = Object.keys(bandCounter);\n  companies.forEach(company => {\n    company.loans.forEach(loan => {\n      for (let i = 0; i < bands.length; i++) {\n        if (loan.amount < bands[i]) {\n          bandCounter[bands[i]] += 1;\n          return;\n        }\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/calculationFunctions.js"],"names":["average","type","info","console","log","number","total","bandCounter","forEach","business","loans","loan","amount","bands","Object","keys","averageLoan","items","itemName","tags","id","name","companies","_id","otherType","loanBandCounter","company","i","length"],"mappings":"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","sourcesContent":["export const average= (type, info)=>{\n    console.log(type);\n    let number =0;\n    let total = 0;\n    let bandCounter = {15000: 0, 25000: 0, 50000: 0, 100000: 0, 250000: 0, 500000: 0, 750000: 0, 1000000: 0, 2000000: 0};\n    info.forEach(business => {\n        business.loans.forEach(loan=>{\n            if(loan.type === type){\n                total += loan.amount;\n                number += 1;\n            }\n            let bands = Object.keys(bandCounter);\n            if(loan.amount>=15000 && loan.amount<25000) bandCounter[15000] += 1;\n            else if (loan.amount>=25000 && loan.amount<50000) bandCounter[25000] += 1;\n            else if (loan.amount>=100000 && loan.amount<250000) bandCounter[100000] += 1;\n            else if (loan.amount>=250000 && loan.amount<500000) bandCounter[250000] += 1;\n            else if (loan.amount>=500000 && loan.amount<750000) bandCounter[500000] += 1;\n            else if (loan.amount>=750000 && loan.amount<1000000) bandCounter[750000] += 1;\n            else if (loan.amount>=1000000 && loan.amount<2000000) bandCounter[1000000] += 1;\n            else if (loan.amount>=2000000) bandCounter[2000000] += 1;\n        })\n    });\n    let averageLoan = total/number;\n\n    return [averageLoan, total, bandCounter, info];\n}\n\n// export let specificLoanBands = (amount, minAmount, maxAmount)=>{\n//         let counter = 0;\n//         if(amount<=maxAmount && amount>= minAmount){\n//             counter+=1;\n//         }\n//         return counter;\n//     }\n\nlet items = [{\n    itemName: 'item1',\n    tags: [\n      {id: 'tag1', name: 'Tag 1'},\n      {id: 'tag2', name: 'Tag 2'}\n    ]\n  }, {\n    itemName: 'item2',\n    tags: [\n      {id: 'tag1', name: 'Tag 1'},\n      {id: 'tag3', name: 'Tag 3'}\n    ]\n  }];\n\n  let companies = [\n      {\n          _id: \"5f404639c76eb722b9e184d3\", \n          name: \"David\", \n          loans: [{_id: \"5f404639c76eb722b9e184d2\", amount: 787098, type: \"Buy another business\", otherType: \"\"}]}]\n  \n//   export const loanAmounts = companies.reduce((acc, company)=>{\n//       let loans = company.loans.reduce((acc2, loan) => {\n//         return [...acc2, loan.amount]\n//       },[]);\n//       return [...acc, loans]\n//   }, []).flat();\n\n\n\n \nexport const loanBandCounter = (companies)=>{\n    let bandCounter = {15000: 0, 25000: 0, 50000: 0, 100000: 0, 250000: 0, 500000: 0, 750000: 0, 1000000: 0, 2000000: 0};\n    let bands = Object.keys(bandCounter);\n    companies.forEach(company=>{\n      company.loans.forEach(loan=>{\n          for(let i=0; i<bands.length; i++){\n              if(loan.amount < bands[i]) {\n                  bandCounter[bands[i]] += 1;\n                  return;\n          }\n        }\n    })\n})\n  }\n\n\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export const average = (type, info) => {\n  console.log(type);\n  let number = 0;\n  let total = 0;\n  let bands = {\n    15000: 0,\n    25000: 0,\n    50000: 0,\n    100000: 0,\n    250000: 0,\n    500000: 0,\n    750000: 0,\n    1000000: 0,\n    2000000: 0\n  };\n  info.forEach(business => {\n    business.loans.forEach(loan => {\n      if (loan.type === type) {\n        total += loan.amount;\n        number += 1;\n      }\n\n      if (loan.amount >= 15000 && loan.amount < 25000) bands[15000] += 1;else if (loan.amount >= 25000 && loan.amount < 50000) bands[25000] += 1;else if (loan.amount >= 100000 && loan.amount < 250000) bands[100000] += 1;else if (loan.amount >= 250000 && loan.amount < 500000) bands[250000] += 1;else if (loan.amount >= 500000 && loan.amount < 750000) bands[500000] += 1;else if (loan.amount >= 750000 && loan.amount < 1000000) bands[750000] += 1;else if (loan.amount >= 1000000 && loan.amount < 2000000) bands[1000000] += 1;else if (loan.amount >= 2000000) bands[2000000] += 1;\n    });\n  });\n  let averageLoan = total / number;\n  return [averageLoan, total, bands, info];\n}; // export let specificLoanBands = (amount, minAmount, maxAmount)=>{\n//         let counter = 0;\n//         if(amount<=maxAmount && amount>= minAmount){\n//             counter+=1;\n//         }\n//         return counter;\n//     }","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/calculationFunctions.js"],"names":["average","type","info","console","log","number","total","bands","forEach","business","loans","loan","amount","averageLoan"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAE,CAACC,IAAD,EAAOC,IAAP,KAAc;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,MAAII,MAAM,GAAE,CAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG;AAAC,WAAO,CAAR;AAAW,WAAO,CAAlB;AAAqB,WAAO,CAA5B;AAA+B,YAAQ,CAAvC;AAA0C,YAAQ,CAAlD;AAAqD,YAAQ,CAA7D;AAAgE,YAAQ,CAAxE;AAA2E,aAAS,CAApF;AAAuF,aAAS;AAAhG,GAAZ;AACAL,EAAAA,IAAI,CAACM,OAAL,CAAaC,QAAQ,IAAI;AACrBA,IAAAA,QAAQ,CAACC,KAAT,CAAeF,OAAf,CAAuBG,IAAI,IAAE;AACzB,UAAGA,IAAI,CAACV,IAAL,KAAcA,IAAjB,EAAsB;AAClBK,QAAAA,KAAK,IAAIK,IAAI,CAACC,MAAd;AACAP,QAAAA,MAAM,IAAI,CAAV;AACH;;AACD,UAAGM,IAAI,CAACC,MAAL,IAAa,KAAb,IAAsBD,IAAI,CAACC,MAAL,GAAY,KAArC,EAA4CL,KAAK,CAAC,KAAD,CAAL,IAAgB,CAAhB,CAA5C,KACK,IAAII,IAAI,CAACC,MAAL,IAAa,KAAb,IAAsBD,IAAI,CAACC,MAAL,GAAY,KAAtC,EAA6CL,KAAK,CAAC,KAAD,CAAL,IAAgB,CAAhB,CAA7C,KACA,IAAII,IAAI,CAACC,MAAL,IAAa,MAAb,IAAuBD,IAAI,CAACC,MAAL,GAAY,MAAvC,EAA+CL,KAAK,CAAC,MAAD,CAAL,IAAiB,CAAjB,CAA/C,KACA,IAAII,IAAI,CAACC,MAAL,IAAa,MAAb,IAAuBD,IAAI,CAACC,MAAL,GAAY,MAAvC,EAA+CL,KAAK,CAAC,MAAD,CAAL,IAAiB,CAAjB,CAA/C,KACA,IAAII,IAAI,CAACC,MAAL,IAAa,MAAb,IAAuBD,IAAI,CAACC,MAAL,GAAY,MAAvC,EAA+CL,KAAK,CAAC,MAAD,CAAL,IAAiB,CAAjB,CAA/C,KACA,IAAII,IAAI,CAACC,MAAL,IAAa,MAAb,IAAuBD,IAAI,CAACC,MAAL,GAAY,OAAvC,EAAgDL,KAAK,CAAC,MAAD,CAAL,IAAiB,CAAjB,CAAhD,KACA,IAAII,IAAI,CAACC,MAAL,IAAa,OAAb,IAAwBD,IAAI,CAACC,MAAL,GAAY,OAAxC,EAAiDL,KAAK,CAAC,OAAD,CAAL,IAAkB,CAAlB,CAAjD,KACA,IAAII,IAAI,CAACC,MAAL,IAAa,OAAjB,EAA0BL,KAAK,CAAC,OAAD,CAAL,IAAkB,CAAlB;AAClC,KAbD;AAcH,GAfD;AAgBA,MAAIM,WAAW,GAAGP,KAAK,GAACD,MAAxB;AAEA,SAAO,CAACQ,WAAD,EAAcP,KAAd,EAAqBC,KAArB,EAA4BL,IAA5B,CAAP;AACH,CAxBM,C,CA0BP;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export const average= (type, info)=>{\n    console.log(type);\n    let number =0;\n    let total = 0;\n    let bands = {15000: 0, 25000: 0, 50000: 0, 100000: 0, 250000: 0, 500000: 0, 750000: 0, 1000000: 0, 2000000: 0};\n    info.forEach(business => {\n        business.loans.forEach(loan=>{\n            if(loan.type === type){\n                total += loan.amount;\n                number += 1;\n            }\n            if(loan.amount>=15000 && loan.amount<25000) bands[15000] += 1;\n            else if (loan.amount>=25000 && loan.amount<50000) bands[25000] += 1;\n            else if (loan.amount>=100000 && loan.amount<250000) bands[100000] += 1;\n            else if (loan.amount>=250000 && loan.amount<500000) bands[250000] += 1;\n            else if (loan.amount>=500000 && loan.amount<750000) bands[500000] += 1;\n            else if (loan.amount>=750000 && loan.amount<1000000) bands[750000] += 1;\n            else if (loan.amount>=1000000 && loan.amount<2000000) bands[1000000] += 1;\n            else if (loan.amount>=2000000) bands[2000000] += 1;\n        })\n    });\n    let averageLoan = total/number;\n\n    return [averageLoan, total, bands, info];\n}\n\n// export let specificLoanBands = (amount, minAmount, maxAmount)=>{\n//         let counter = 0;\n//         if(amount<=maxAmount && amount>= minAmount){\n//             counter+=1;\n//         }\n//         return counter;\n//     }"]},"metadata":{},"sourceType":"module"}
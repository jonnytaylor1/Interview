{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { frequencyAndTotal, loanBandCounter } from '../calculationFunctions';\nimport { loanTypes, initialChartConfig, bandCounter, bandGroups } from '../config';\nimport { isFieldValid } from '../formValidation';\nimport AllCharts from '../components/chart';\nimport AddLoanForm from '../components/AddLoanForm';\nconst StyledOuterDiv = styled.div`\ndisplay: flex;\n`;\nconst BusinessesContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 600px;\nmargin-top: 5rem;\n`;\nconst StyledUl = styled.ul`\ndisplay: flex;\nwidth: 500px;\nflex-direction: column;\noverflow-y: scroll;\nheight: 37rem;\n`;\nexport const StyledButton = styled.button`\nbackground: ${props => {\n  if (props.active === \"isactive\") return \"blue\";else return props.background;\n}};\n:disabled {\n    background: grey;\n    cursor: not-allowed;\n}\n`;\nexport const ChartButton = styled(StyledButton)`\nwidth: calc(100%/3);\n`;\nconst StyledInnerDiv = styled.div`\ndisplay: flex;\nalign-self: flex-end;\nmargin: 5rem 5rem 0 5rem;\ngap: 5rem;\nheight: calc(100vh - 7rem);\n`;\n\nclass LoansAndData extends Component {\n  componentDidMount() {\n    this.getCompanies();\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.getCompanies = () => {\n      axios.get('http://localhost:5000/loans').then(response => {\n        console.log(response.data.companies); //Creates the averages and total of each loan type data\n\n        let frequencyAndTotalData = frequencyAndTotal(loanTypes, response.data.companies);\n        let dataTypes = Object.keys(frequencyAndTotalData);\n        let frequencyAndTotals = Object.values(frequencyAndTotalData);\n        let averages = frequencyAndTotals.map(data => data.frequency !== 0 ? Math.round(data.totalAmount / data.frequency).toString() : 0);\n        let typeFrequencies = frequencyAndTotals.map(data => data.frequency); //Creates the loan band data\n\n        let bandCounterObject = loanBandCounter(response.data.companies, bandCounter);\n        let bandFrequencies = Object.values(bandCounterObject); //Updates the company state\n\n        this.setState({ ...this.state,\n          companies: response.data.companies.reverse(),\n          calculationsData: {\n            averages: averages,\n            frequencies: typeFrequencies,\n            bandFrequencies: bandFrequencies\n          }\n        }); //Updates the graph data\n\n        let graphName = this.state.chartConfig.series[0].name;\n        if (graphName === \"Averages\" || graphName === \"\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Averages\",\n              data: averages\n            }]\n          }\n        });else if (graphName === \"Frequency (Type)\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Frequency (Type)\",\n              data: typeFrequencies\n            }]\n          }\n        });else if (graphName === \"Frequency (Band)\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: bandGroups\n              }\n            },\n            series: [{\n              name: \"Frequency (Band)\",\n              data: bandFrequencies\n            }]\n          }\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.addLoan = async e => {\n      e.preventDefault();\n\n      try {\n        await axios.post('http://localhost:5000/loans', this.state.loanData);\n        this.setState({ ...this.state,\n          loanData: this.initialFormData\n        });\n        this.getCompanies();\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.dropDownChangeHandler = e => {\n      let {\n        value\n      } = e.target;\n\n      if (value === \"Other\") {\n        this.setState({ ...this.state,\n          loanData: { ...this.state.loanData,\n            type: value\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: false\n          }\n        });\n      } else {\n        this.setState({ ...this.state,\n          loanData: { ...this.state.loanData,\n            type: value,\n            otherType: \"\"\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: true\n          }\n        });\n      }\n    };\n\n    this.onChangeHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      this.setState({ ...this.state,\n        loanData: { ...this.state.loanData,\n          [name]: value\n        }\n      });\n    };\n\n    this.onBlurHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      let validator = isFieldValid(name, value);\n      this.setState({ ...this.state,\n        inputClicked: { ...this.state.inputClicked,\n          [name]: true\n        },\n        inputValidated: { ...this.state.inputValidated,\n          [name]: validator\n        }\n      });\n    };\n\n    this.deleteCompany = async (e, companyId) => {\n      e.stopPropagation();\n\n      try {\n        await axios.delete('http://localhost:5000/loans/' + companyId); //If more time I would use this to update the array instead of calling from the database\n        // let updatedCompanies = [...this.state.companies].filter(company=>company._id!==companyId);\n        // this.setState({...this.state, companies: updatedCompanies});\n\n        this.getCompanies();\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.changeGraph = e => {\n      let name;\n      let data;\n      let categories;\n      let activeGraph;\n\n      switch (e.target.name) {\n        case \"average\":\n          name = \"Averages\";\n          data = this.state.calculationsData.averages;\n          categories = loanTypes;\n          activeGraph = \"Average\";\n          break;\n\n        case \"frequencyType\":\n          name = \"Frequency (Type)\";\n          data = this.state.calculationsData.frequencies;\n          categories = loanTypes;\n          activeGraph = \"Frequency (Type)\";\n          break;\n\n        case \"frequencyBands\":\n          name = \"Frequency (Band)\";\n          data = this.state.calculationsData.bandFrequencies;\n          categories = bandGroups;\n          activeGraph = \"Frequency (Band)\";\n          break;\n\n        default:\n          console.log(\"error\");\n      }\n\n      this.setState({ ...this.state,\n        chartConfig: { ...this.state.chartConfig,\n          options: { ...this.state.chartConfig.options,\n            xaxis: { ...this.state.chartConfig.options.xaxis,\n              categories: categories\n            }\n          },\n          series: [{\n            name: name,\n            data: data\n          }]\n        },\n        activeGraph: activeGraph\n      });\n    };\n\n    this.initialFormData = {\n      name: \"\",\n      amount: \"\",\n      type: \"DEFAULT\",\n      otherType: \"\"\n    };\n    this.state = {\n      chartConfig: initialChartConfig,\n      companies: [],\n      calculationsData: {},\n      activeGraph: \"Average\",\n      loanData: this.initialFormData,\n      inputValidated: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: true\n      },\n      inputClicked: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: false\n      }\n    };\n  } //Retrieves the companies, forms the data, creates the graphs\n\n\n  render() {\n    const {\n      companyLoanDetails,\n      setCompanyLoanDetails\n    } = this.context;\n\n    const showLoanDetails = (e, companyId) => {\n      let clickedCompany = this.state.companies.find(company => company._id === companyId);\n      setCompanyLoanDetails(clickedCompany);\n      this.props.history.push('/details');\n    };\n\n    let companiesUI;\n\n    if (this.state.companies.length !== 0) {\n      companiesUI = this.state.companies.map(company => {\n        return /*#__PURE__*/React.createElement(Company, {\n          showLoanDetails: e => showLoanDetails(e, company._id),\n          key: company._id,\n          name: company.name,\n          deleteCompany: e => this.deleteCompany(e, company._id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 24\n          }\n        }, company.loans.map(loan => /*#__PURE__*/React.createElement(LoanRequest, {\n          amount: loan.amount,\n          type: loan.type,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 49\n          }\n        })));\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(StyledOuterDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BusinessesContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, \"Businesses\"), companiesUI ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }\n    }, \"Click Business to Show Further Details\"), /*#__PURE__*/React.createElement(StyledUl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, companiesUI)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }\n    }, \"Currently no businesses\")), /*#__PURE__*/React.createElement(StyledInnerDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AllCharts, {\n      series: this.state.chartConfig.series,\n      options: this.state.chartConfig.options,\n      activeGraph: this.state.activeGraph,\n      onChange: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(AddLoanForm, {\n      loanData: this.state.loanData,\n      inputClicked: this.state.inputClicked,\n      inputValidated: this.state.inputValidated,\n      dropdownChange: e => this.dropDownChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      onChange: e => this.onChangeHandler(e),\n      onSubmit: e => this.addLoan(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nLoansAndData.contextType = companyLoanContext;\nexport default LoansAndData;","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js"],"names":["React","Component","axios","loanTypeContext","companyLoanContext","Company","LoanRequest","styled","frequencyAndTotal","loanBandCounter","loanTypes","initialChartConfig","bandCounter","bandGroups","isFieldValid","AllCharts","AddLoanForm","StyledOuterDiv","div","BusinessesContainer","StyledUl","ul","StyledButton","button","props","active","background","ChartButton","StyledInnerDiv","LoansAndData","componentDidMount","getCompanies","constructor","get","then","response","console","log","data","companies","frequencyAndTotalData","dataTypes","Object","keys","frequencyAndTotals","values","averages","map","frequency","Math","round","totalAmount","toString","typeFrequencies","bandCounterObject","bandFrequencies","setState","state","reverse","calculationsData","frequencies","graphName","chartConfig","series","name","options","xaxis","categories","catch","err","addLoan","e","preventDefault","post","loanData","initialFormData","dropDownChangeHandler","value","target","type","inputValidated","otherType","onChangeHandler","onBlurHandler","validator","inputClicked","deleteCompany","companyId","stopPropagation","delete","changeGraph","activeGraph","amount","render","companyLoanDetails","setCompanyLoanDetails","context","showLoanDetails","clickedCompany","find","company","_id","history","push","companiesUI","length","loans","loan","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,YAApD;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,yBAAnD;AACA,SAASC,SAAT,EAAoBC,kBAApB,EAAwCC,WAAxC,EAAqDC,UAArD,QAAuE,WAAvE;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,MAAMC,cAAc,GAAGV,MAAM,CAACW,GAAI;;CAAlC;AAIA,MAAMC,mBAAmB,GAAGZ,MAAM,CAACW,GAAI;;;;;;CAAvC;AAQA,MAAME,QAAQ,GAAGb,MAAM,CAACc,EAAG;;;;;;CAA3B;AAQA,OAAO,MAAMC,YAAY,GAAGf,MAAM,CAACgB,MAAO;cAC5BC,KAAK,IAAE;AACjB,MAAGA,KAAK,CAACC,MAAN,KAAe,UAAlB,EAA8B,OAAO,MAAP,CAA9B,KACK,OAAOD,KAAK,CAACE,UAAb;AACR,CAAC;;;;;CAJK;AAWP,OAAO,MAAMC,WAAW,GAAGpB,MAAM,CAACe,YAAD,CAAe;;CAAzC;AAKP,MAAMM,cAAc,GAAGrB,MAAM,CAACW,GAAI;;;;;;CAAlC;;AASA,MAAMW,YAAN,SAA2B5B,SAA3B,CAAqC;AAGjC6B,EAAAA,iBAAiB,GAAG;AAAC,SAAKC,YAAL;AAAqB;;AAE1CC,EAAAA,WAAW,CAACR,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAenBO,YAfmB,GAeJ,MAAI;AACf7B,MAAAA,KAAK,CAAC+B,GAAN,CAAU,6BAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,CAAcC,SAA1B,EADc,CAEd;;AACA,YAAIC,qBAAqB,GAAGhC,iBAAiB,CAACE,SAAD,EAAYyB,QAAQ,CAACG,IAAT,CAAcC,SAA1B,CAA7C;AACA,YAAIE,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,qBAAZ,CAAhB;AACA,YAAII,kBAAkB,GAAGF,MAAM,CAACG,MAAP,CAAcL,qBAAd,CAAzB;AACA,YAAIM,QAAQ,GAAGF,kBAAkB,CAACG,GAAnB,CAAuBT,IAAI,IAAGA,IAAI,CAACU,SAAL,KAAmB,CAAnB,GAAuBC,IAAI,CAACC,KAAL,CAAWZ,IAAI,CAACa,WAAL,GAAiBb,IAAI,CAACU,SAAjC,EAA4CI,QAA5C,EAAvB,GAAgF,CAA9G,CAAf;AACA,YAAIC,eAAe,GAAGT,kBAAkB,CAACG,GAAnB,CAAuBT,IAAI,IAAEA,IAAI,CAACU,SAAlC,CAAtB,CAPc,CAQd;;AACA,YAAIM,iBAAiB,GAAG7C,eAAe,CAAC0B,QAAQ,CAACG,IAAT,CAAcC,SAAf,EAA0B3B,WAA1B,CAAvC;AACA,YAAI2C,eAAe,GAAGb,MAAM,CAACG,MAAP,CAAcS,iBAAd,CAAtB,CAVc,CAWd;;AACA,aAAKE,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AACVlB,UAAAA,SAAS,EAAEJ,QAAQ,CAACG,IAAT,CAAcC,SAAd,CAAwBmB,OAAxB,EADD;AAEVC,UAAAA,gBAAgB,EAAE;AAACb,YAAAA,QAAQ,EAAEA,QAAX;AAAqBc,YAAAA,WAAW,EAAEP,eAAlC;AAAmDE,YAAAA,eAAe,EAAEA;AAApE;AAFR,SAAd,EAZc,CAgBd;;AACA,YAAIM,SAAS,GAAG,KAAKJ,KAAL,CAAWK,WAAX,CAAuBC,MAAvB,CAA8B,CAA9B,EAAiCC,IAAjD;AACA,YAAGH,SAAS,KAAG,UAAZ,IAAwBA,SAAS,KAAG,EAAvC,EAA2C,KAAKL,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AAAgBK,UAAAA,WAAW,EAAE,EAAC,GAAG,KAAKL,KAAL,CAAWK,WAAf;AAA4BG,YAAAA,OAAO,EAAE,EAAC,GAAG,KAAKR,KAAL,CAAWK,WAAX,CAAuBG,OAA3B;AAAoCC,cAAAA,KAAK,EAAE,EAAC,GAAG,KAAKT,KAAL,CAAWK,WAAX,CAAuBG,OAAvB,CAA+BC,KAAnC;AAA0CC,gBAAAA,UAAU,EAAE1B;AAAtD;AAA3C,aAArC;AAAmJsB,YAAAA,MAAM,EAAE,CAAC;AAACC,cAAAA,IAAI,EAAC,UAAN;AAAkB1B,cAAAA,IAAI,EAAEQ;AAAxB,aAAD;AAA3J;AAA7B,SAAd,EAA3C,KACK,IAAIe,SAAS,KAAG,kBAAhB,EAAqC,KAAKL,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AAAgBK,UAAAA,WAAW,EAAE,EAAC,GAAG,KAAKL,KAAL,CAAWK,WAAf;AAA4BG,YAAAA,OAAO,EAAE,EAAC,GAAG,KAAKR,KAAL,CAAWK,WAAX,CAAuBG,OAA3B;AAAoCC,cAAAA,KAAK,EAAE,EAAC,GAAG,KAAKT,KAAL,CAAWK,WAAX,CAAuBG,OAAvB,CAA+BC,KAAnC;AAA0CC,gBAAAA,UAAU,EAAE1B;AAAtD;AAA3C,aAArC;AAAmJsB,YAAAA,MAAM,EAAE,CAAC;AAACC,cAAAA,IAAI,EAAC,kBAAN;AAA0B1B,cAAAA,IAAI,EAAEe;AAAhC,aAAD;AAA3J;AAA7B,SAAd,EAArC,KACA,IAAIQ,SAAS,KAAG,kBAAhB,EAAoC,KAAKL,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AAAgBK,UAAAA,WAAW,EAAE,EAAC,GAAG,KAAKL,KAAL,CAAWK,WAAf;AAA4BG,YAAAA,OAAO,EAAE,EAAC,GAAG,KAAKR,KAAL,CAAWK,WAAX,CAAuBG,OAA3B;AAAoCC,cAAAA,KAAK,EAAE,EAAC,GAAG,KAAKT,KAAL,CAAWK,WAAX,CAAuBG,OAAvB,CAA+BC,KAAnC;AAA0CC,gBAAAA,UAAU,EAAEtD;AAAtD;AAA3C,aAArC;AAAoJkD,YAAAA,MAAM,EAAE,CAAC;AAACC,cAAAA,IAAI,EAAC,kBAAN;AAA0B1B,cAAAA,IAAI,EAAEiB;AAAhC,aAAD;AAA5J;AAA7B,SAAd;AACpD,OAtBO,EAuBPa,KAvBO,CAuBDC,GAAG,IAAEjC,OAAO,CAACC,GAAR,CAAYgC,GAAZ,CAvBJ;AAuBuB,KAvCR;;AAAA,SA0CnBC,OA1CmB,GA0CT,MAAOC,CAAP,IAAW;AACjBA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAG;AACH,cAAMtE,KAAK,CAACuE,IAAN,CAAW,6BAAX,EAA0C,KAAKhB,KAAL,CAAWiB,QAArD,CAAN;AACA,aAAKlB,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AAAgBiB,UAAAA,QAAQ,EAAE,KAAKC;AAA/B,SAAd;AACA,aAAK5C,YAAL;AACC,OAJD,CAKA,OAAMsC,GAAN,EAAU;AACNjC,QAAAA,OAAO,CAACC,GAAR,CAAYgC,GAAZ;AACH;AACJ,KApDkB;;AAAA,SAuDnBO,qBAvDmB,GAuDML,CAAD,IAAK;AACzB,UAAI;AAACM,QAAAA;AAAD,UAAUN,CAAC,CAACO,MAAhB;;AACA,UAAGD,KAAK,KAAG,OAAX,EAAmB;AACf,aAAKrB,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AACViB,UAAAA,QAAQ,EAAE,EAAC,GAAG,KAAKjB,KAAL,CAAWiB,QAAf;AAAyBK,YAAAA,IAAI,EAAEF;AAA/B,WADA;AAEVG,UAAAA,cAAc,EAAE,EAAC,GAAG,KAAKvB,KAAL,CAAWuB,cAAf;AAA+BC,YAAAA,SAAS,EAAE;AAA1C;AAFN,SAAd;AAGH,OAJD,MAKI;AACA,aAAKzB,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AACViB,UAAAA,QAAQ,EAAE,EAAC,GAAG,KAAKjB,KAAL,CAAWiB,QAAf;AAAyBK,YAAAA,IAAI,EAAEF,KAA/B;AAAsCI,YAAAA,SAAS,EAAE;AAAjD,WADA;AAEVD,UAAAA,cAAc,EAAE,EAAC,GAAG,KAAKvB,KAAL,CAAWuB,cAAf;AAA+BC,YAAAA,SAAS,EAAE;AAA1C;AAFN,SAAd;AAGH;AACJ,KAnEkB;;AAAA,SAsEnBC,eAtEmB,GAsEAX,CAAD,IAAK;AACnB,UAAI;AAACP,QAAAA,IAAD;AAAOa,QAAAA;AAAP,UAAgBN,CAAC,CAACO,MAAtB;AACA,WAAKtB,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AAAgBiB,QAAAA,QAAQ,EAAE,EAAC,GAAG,KAAKjB,KAAL,CAAWiB,QAAf;AAAyB,WAACV,IAAD,GAAQa;AAAjC;AAA1B,OAAd;AACH,KAzEkB;;AAAA,SA4EnBM,aA5EmB,GA4EFZ,CAAD,IAAK;AACjB,UAAI;AAACP,QAAAA,IAAD;AAAOa,QAAAA;AAAP,UAAgBN,CAAC,CAACO,MAAtB;AACA,UAAIM,SAAS,GAAGtE,YAAY,CAACkD,IAAD,EAAOa,KAAP,CAA5B;AAEA,WAAKrB,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AACV4B,QAAAA,YAAY,EAAE,EAAC,GAAG,KAAK5B,KAAL,CAAW4B,YAAf;AAA6B,WAACrB,IAAD,GAAQ;AAArC,SADJ;AAEVgB,QAAAA,cAAc,EAAE,EAAC,GAAG,KAAKvB,KAAL,CAAWuB,cAAf;AAA+B,WAAChB,IAAD,GAAQoB;AAAvC;AAFN,OAAd;AAIH,KApFkB;;AAAA,SAuFnBE,aAvFmB,GAuFH,OAAOf,CAAP,EAAUgB,SAAV,KAAsB;AAClChB,MAAAA,CAAC,CAACiB,eAAF;;AACA,UAAG;AACH,cAAMtF,KAAK,CAACuF,MAAN,CAAa,iCAAiCF,SAA9C,CAAN,CADG,CAEA;AACH;AACA;;AACA,aAAKxD,YAAL;AACC,OAND,CAOA,OAAOsC,GAAP,EAAW;AACPjC,QAAAA,OAAO,CAACC,GAAR,CAAYgC,GAAZ;AACH;AACJ,KAnGkB;;AAAA,SAsGnBqB,WAtGmB,GAsGNnB,CAAD,IAAK;AACb,UAAIP,IAAJ;AACA,UAAI1B,IAAJ;AACA,UAAI6B,UAAJ;AACA,UAAIwB,WAAJ;;AACA,cAAQpB,CAAC,CAACO,MAAF,CAASd,IAAjB;AACI,aAAK,SAAL;AACIA,UAAAA,IAAI,GAAG,UAAP;AACA1B,UAAAA,IAAI,GAAG,KAAKmB,KAAL,CAAWE,gBAAX,CAA4Bb,QAAnC;AACAqB,UAAAA,UAAU,GAAGzD,SAAb;AACAiF,UAAAA,WAAW,GAAG,SAAd;AACA;;AACJ,aAAK,eAAL;AACI3B,UAAAA,IAAI,GAAG,kBAAP;AACA1B,UAAAA,IAAI,GAAG,KAAKmB,KAAL,CAAWE,gBAAX,CAA4BC,WAAnC;AACAO,UAAAA,UAAU,GAAGzD,SAAb;AACAiF,UAAAA,WAAW,GAAG,kBAAd;AACA;;AAEJ,aAAK,gBAAL;AACI3B,UAAAA,IAAI,GAAG,kBAAP;AACA1B,UAAAA,IAAI,GAAG,KAAKmB,KAAL,CAAWE,gBAAX,CAA4BJ,eAAnC;AACAY,UAAAA,UAAU,GAAGtD,UAAb;AACA8E,UAAAA,WAAW,GAAG,kBAAd;AACA;;AACJ;AACIvD,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AArBR;;AAuBI,WAAKmB,QAAL,CAAc,EAAC,GAAG,KAAKC,KAAT;AACVK,QAAAA,WAAW,EAAE,EAAC,GAAG,KAAKL,KAAL,CAAWK,WAAf;AAA4BG,UAAAA,OAAO,EAAC,EAAC,GAAG,KAAKR,KAAL,CAAWK,WAAX,CAAuBG,OAA3B;AAAoCC,YAAAA,KAAK,EAAE,EAAC,GAAG,KAAKT,KAAL,CAAWK,WAAX,CAAuBG,OAAvB,CAA+BC,KAAnC;AAA0CC,cAAAA,UAAU,EAAEA;AAAtD;AAA3C,WAApC;AAAmJJ,UAAAA,MAAM,EAAE,CAAC;AAACC,YAAAA,IAAI,EAAEA,IAAP;AAAa1B,YAAAA,IAAI,EAAEA;AAAnB,WAAD;AAA3J,SADH;AAEVqD,QAAAA,WAAW,EAAEA;AAFH,OAAd;AAGC,KArIU;;AAEf,SAAKhB,eAAL,GAAuB;AAACX,MAAAA,IAAI,EAAE,EAAP;AAAW4B,MAAAA,MAAM,EAAE,EAAnB;AAAuBb,MAAAA,IAAI,EAAE,SAA7B;AAAwCE,MAAAA,SAAS,EAAE;AAAnD,KAAvB;AACA,SAAKxB,KAAL,GAAa;AACTK,MAAAA,WAAW,EAAEnD,kBADJ;AAET4B,MAAAA,SAAS,EAAE,EAFF;AAGToB,MAAAA,gBAAgB,EAAE,EAHT;AAITgC,MAAAA,WAAW,EAAE,SAJJ;AAKTjB,MAAAA,QAAQ,EAAE,KAAKC,eALN;AAMTK,MAAAA,cAAc,EAAE;AAAChB,QAAAA,IAAI,EAAE,KAAP;AAAc4B,QAAAA,MAAM,EAAE,KAAtB;AAA6Bb,QAAAA,IAAI,EAAE,KAAnC;AAA0CE,QAAAA,SAAS,EAAE;AAArD,OANP;AAOTI,MAAAA,YAAY,EAAE;AAACrB,QAAAA,IAAI,EAAE,KAAP;AAAc4B,QAAAA,MAAM,EAAE,KAAtB;AAA6Bb,QAAAA,IAAI,EAAE,KAAnC;AAA0CE,QAAAA,SAAS,EAAE;AAArD;AAPL,KAAb;AAUH,GAlBgC,CAmBjC;;;AAyHAY,EAAAA,MAAM,GAAE;AAEL,UAAM;AAAEC,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAAgD,KAAKC,OAA3D;;AAEC,UAAMC,eAAe,GAAG,CAAC1B,CAAD,EAAIgB,SAAJ,KAAgB;AACxC,UAAIW,cAAc,GAAG,KAAKzC,KAAL,CAAWlB,SAAX,CAAqB4D,IAArB,CAA0BC,OAAO,IAAGA,OAAO,CAACC,GAAR,KAAcd,SAAlD,CAArB;AACAQ,MAAAA,qBAAqB,CAACG,cAAD,CAArB;AACA,WAAK1E,KAAL,CAAW8E,OAAX,CAAmBC,IAAnB,CAAwB,UAAxB;AACH,KAJG;;AAMA,QAAIC,WAAJ;;AACA,QAAG,KAAK/C,KAAL,CAAWlB,SAAX,CAAqBkE,MAArB,KAA8B,CAAjC,EAAmC;AAC/BD,MAAAA,WAAW,GAAG,KAAK/C,KAAL,CAAWlB,SAAX,CAAqBQ,GAArB,CAAyBqD,OAAO,IAAE;AAC5C,4BAAO,oBAAC,OAAD;AAAS,UAAA,eAAe,EAAG7B,CAAD,IAAK0B,eAAe,CAAC1B,CAAD,EAAI6B,OAAO,CAACC,GAAZ,CAA9C;AAAgE,UAAA,GAAG,EAAED,OAAO,CAACC,GAA7E;AAAkF,UAAA,IAAI,EAAID,OAAO,CAACpC,IAAlG;AAAwG,UAAA,aAAa,EAAGO,CAAD,IAAK,KAAKe,aAAL,CAAmBf,CAAnB,EAAsB6B,OAAO,CAACC,GAA9B,CAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACFD,OAAO,CAACM,KAAR,CAAc3D,GAAd,CAAmB4D,IAAD,iBAAS,oBAAC,WAAD;AAAa,UAAA,MAAM,EAAEA,IAAI,CAACf,MAA1B;AAAkC,UAAA,IAAI,EAAEe,IAAI,CAAC5B,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA3B,CADE,CAAP;AAGH,OAJa,CAAd;AAKH;;AAEL,wBAEI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADR,EAESyB,WAAW,gBACR,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADJ,eAEI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWA,WAAX,CAFJ,CADQ,gBAKR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAPZ,CADA,eAUA,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,SAAD;AAAY,MAAA,MAAM,EAAE,KAAK/C,KAAL,CAAWK,WAAX,CAAuBC,MAA3C;AAAmD,MAAA,OAAO,EAAE,KAAKN,KAAL,CAAWK,WAAX,CAAuBG,OAAnF;AAA4F,MAAA,WAAW,EAAE,KAAKR,KAAL,CAAWkC,WAApH;AAAiI,MAAA,QAAQ,EAAGpB,CAAD,IAAK,KAAKmB,WAAL,CAAiBnB,CAAjB,CAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWiB,QAAlC;AAA4C,MAAA,YAAY,EAAE,KAAKjB,KAAL,CAAW4B,YAArE;AAAmF,MAAA,cAAc,EAAE,KAAK5B,KAAL,CAAWuB,cAA9G;AAA8H,MAAA,cAAc,EAAGT,CAAD,IAAK,KAAKK,qBAAL,CAA2BL,CAA3B,CAAnJ;AAAkL,MAAA,MAAM,EAAGA,CAAD,IAAK,KAAKY,aAAL,CAAmBZ,CAAnB,CAA/L;AAAsN,MAAA,QAAQ,EAAGA,CAAD,IAAK,KAAKW,eAAL,CAAqBX,CAArB,CAArO;AAA8P,MAAA,QAAQ,EAAGA,CAAD,IAAK,KAAKD,OAAL,CAAaC,CAAb,CAA7Q;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAVA,CAFJ;AAmBH;;AAlLoC;;AAA/B1C,Y,CACK+E,W,GAAcxG,kB;AAoLzB,eAAeyB,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { frequencyAndTotal, loanBandCounter } from '../calculationFunctions';\nimport { loanTypes, initialChartConfig, bandCounter, bandGroups } from '../config';\nimport { isFieldValid } from '../formValidation';\nimport AllCharts from '../components/chart';\nimport AddLoanForm from '../components/AddLoanForm';\n\nconst StyledOuterDiv = styled.div`\ndisplay: flex;\n`\n\nconst BusinessesContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 600px;\nmargin-top: 5rem;\n`\n\nconst StyledUl = styled.ul`\ndisplay: flex;\nwidth: 500px;\nflex-direction: column;\noverflow-y: scroll;\nheight: 37rem;\n`\n\nexport const StyledButton = styled.button`\nbackground: ${props=>{\n    if(props.active===\"isactive\") return \"blue\";\n    else return props.background\n}};\n:disabled {\n    background: grey;\n    cursor: not-allowed;\n}\n`\n\nexport const ChartButton = styled(StyledButton)`\nwidth: calc(100%/3);\n`\n\n\nconst StyledInnerDiv = styled.div`\ndisplay: flex;\nalign-self: flex-end;\nmargin: 5rem 5rem 0 5rem;\ngap: 5rem;\nheight: calc(100vh - 7rem);\n`\n\n\nclass LoansAndData extends Component {\n    static contextType = companyLoanContext\n\n    componentDidMount (){this.getCompanies();}\n\n    constructor(props) {\n        super(props);\n        this.initialFormData = {name: \"\", amount: \"\", type: \"DEFAULT\", otherType: \"\"};\n        this.state = {\n            chartConfig: initialChartConfig,\n            companies: [],\n            calculationsData: {},\n            activeGraph: \"Average\",\n            loanData: this.initialFormData,\n            inputValidated: {name: false, amount: false, type: false, otherType: true},\n            inputClicked: {name: false, amount: false, type: false, otherType: false}\n        }\n    \n    }\n    //Retrieves the companies, forms the data, creates the graphs\n    getCompanies = ()=>{\n        axios.get('http://localhost:5000/loans')\n        .then(response => {\n            console.log(response.data.companies);\n            //Creates the averages and total of each loan type data\n            let frequencyAndTotalData = frequencyAndTotal(loanTypes, response.data.companies);\n            let dataTypes = Object.keys(frequencyAndTotalData);\n            let frequencyAndTotals = Object.values(frequencyAndTotalData);\n            let averages = frequencyAndTotals.map(data=> data.frequency !== 0 ? Math.round(data.totalAmount/data.frequency).toString() : 0);\n            let typeFrequencies = frequencyAndTotals.map(data=>data.frequency);\n            //Creates the loan band data\n            let bandCounterObject = loanBandCounter(response.data.companies, bandCounter);\n            let bandFrequencies = Object.values(bandCounterObject);\n            //Updates the company state\n            this.setState({...this.state, \n                companies: response.data.companies.reverse(),\n                calculationsData: {averages: averages, frequencies: typeFrequencies, bandFrequencies: bandFrequencies}\n            })\n            //Updates the graph data\n            let graphName = this.state.chartConfig.series[0].name;\n            if(graphName===\"Averages\"||graphName===\"\") this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Averages\", data: averages}]}});\n            else if (graphName===\"Frequency (Type)\")  this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Frequency (Type)\", data: typeFrequencies}]}});\n            else if (graphName===\"Frequency (Band)\") this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: bandGroups}}, series: [{name:\"Frequency (Band)\", data: bandFrequencies}]}});\n})\n.catch(err=>console.log(err));}\n   \n    //Adds a loan and updates the companies\n    addLoan = async (e)=>{\n        e.preventDefault();\n        try{\n        await axios.post('http://localhost:5000/loans', this.state.loanData);\n        this.setState({...this.state, loanData: this.initialFormData});\n        this.getCompanies();  \n        }\n        catch(err){\n            console.log(err);\n        }      \n    }\n\n    //updates the state with the dropdown information\n    dropDownChangeHandler = (e)=>{\n        let {value} = e.target;\n        if(value===\"Other\"){\n            this.setState({...this.state, \n                loanData: {...this.state.loanData, type: value},\n                inputValidated: {...this.state.inputValidated, otherType: false}});\n        }\n        else{\n            this.setState({...this.state, \n                loanData: {...this.state.loanData, type: value, otherType: \"\"},\n                inputValidated: {...this.state.inputValidated, otherType: true}});\n        }\n    }\n\n    //updates the state on input change\n    onChangeHandler = (e)=>{\n        let {name, value} = e.target;\n        this.setState({...this.state, loanData: {...this.state.loanData, [name]: value}});\n    }\n\n    //Updates the state on blur and handles errors\n    onBlurHandler = (e)=>{\n        let {name, value} = e.target;\n        let validator = isFieldValid(name, value);\n\n        this.setState({...this.state, \n            inputClicked: {...this.state.inputClicked, [name]: true},\n            inputValidated: {...this.state.inputValidated, [name]: validator}\n        })\n    }\n\n   //Removes a company and it's existing loans\n    deleteCompany = async (e, companyId)=>{\n        e.stopPropagation();\n        try{\n        await axios.delete('http://localhost:5000/loans/' + companyId);\n           //If more time I would use this to update the array instead of calling from the database\n        // let updatedCompanies = [...this.state.companies].filter(company=>company._id!==companyId);\n        // this.setState({...this.state, companies: updatedCompanies});\n        this.getCompanies();\n        }\n        catch (err){\n            console.log(err);\n        }\n    }\n\n  //Changes the graph type and updates the graph data\n    changeGraph=(e)=>{\n        let name;\n        let data;\n        let categories;\n        let activeGraph;\n        switch (e.target.name){\n            case \"average\":\n                name = \"Averages\";\n                data = this.state.calculationsData.averages;\n                categories = loanTypes;\n                activeGraph = \"Average\"\n                break;\n            case \"frequencyType\":\n                name = \"Frequency (Type)\";\n                data = this.state.calculationsData.frequencies;\n                categories = loanTypes;\n                activeGraph = \"Frequency (Type)\"\n                break;\n            \n            case \"frequencyBands\":\n                name = \"Frequency (Band)\";\n                data = this.state.calculationsData.bandFrequencies;\n                categories = bandGroups;\n                activeGraph = \"Frequency (Band)\"\n                break;\n            default:\n                console.log(\"error\");     \n            }\n            this.setState({...this.state, \n                chartConfig: {...this.state.chartConfig, options:{...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: categories}}, series: [{name: name, data: data}]},\n                activeGraph: activeGraph});\n            }\n       \n    render(){\n\n       const { companyLoanDetails, setCompanyLoanDetails } = this.context;\n    \n        const showLoanDetails = (e, companyId)=>{\n        let clickedCompany = this.state.companies.find(company=> company._id===companyId);\n        setCompanyLoanDetails(clickedCompany);\n        this.props.history.push('/details');\n    }\n\n        let companiesUI;\n        if(this.state.companies.length!==0){\n            companiesUI = this.state.companies.map(company=>{\n                return <Company showLoanDetails={(e)=>showLoanDetails(e, company._id)} key={company._id} name = {company.name} deleteCompany={(e)=>this.deleteCompany(e, company._id)}>\n                    {company.loans.map((loan)=> <LoanRequest amount={loan.amount} type={loan.type}/>)}\n                </Company>\n            })\n        }\n\n    return(\n        \n        <StyledOuterDiv>\n        <BusinessesContainer>\n                <h1>Businesses</h1>\n                {companiesUI ? \n                    <> \n                        <p>Click Business to Show Further Details</p>\n                        <StyledUl>{companiesUI}</StyledUl>\n                    </>\n                :   <p>Currently no businesses</p>}\n        </BusinessesContainer>\n        <StyledInnerDiv>\n    \n            <AllCharts  series={this.state.chartConfig.series} options={this.state.chartConfig.options} activeGraph={this.state.activeGraph} onChange={(e)=>this.changeGraph(e)}/>\n            <AddLoanForm loanData={this.state.loanData} inputClicked={this.state.inputClicked} inputValidated={this.state.inputValidated} dropdownChange={(e)=>this.dropDownChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} onChange={(e)=>this.onChangeHandler(e)} onSubmit={(e)=>this.addLoan(e)}/> \n        </StyledInnerDiv>\n        </StyledOuterDiv>\n    )\n}; \n}\n\nexport default LoansAndData;"]},"metadata":{},"sourceType":"module"}
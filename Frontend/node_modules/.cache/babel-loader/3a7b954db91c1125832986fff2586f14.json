{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport InputAndError from '../components/inputAndError';\nimport SelectAndError from '../components/selectAndError';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { frequencyAndTotal, loanBandCounter } from '../calculationFunctions';\nimport Chart from \"react-apexcharts\";\nimport { loanTypes, initialChartConfig } from '../config';\nconst StyledUl = styled.ul`\ndisplay: flex;\nflex-direction: column;\nwidth: 400px;\nmargin-top: 5rem;\n`;\nconst StyledChart = styled(Chart)`\nborder: black solid 1px;\nmargin: 4rem;\nwidth: 700px;\n`;\nconst StyledButton = styled.button`\nbackground: ${props => {\n  if (props.active === \"isactive\") {\n    return \"blue\";\n  }\n}};\n`;\n\nclass LoansAndData extends Component {\n  componentDidMount() {\n    this.getCompanies();\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.getCompanies = () => {\n      axios.get('http://localhost:5000/loans').then(response => {\n        let response2 = frequencyAndTotal(loanTypes, response.data.companies);\n        let dataTypes = Object.keys(response2);\n        let frequencyAndTotals = Object.values(response2);\n        let averages = frequencyAndTotals.map(data => data.frequency !== 0 ? Math.round(data.totalAmount / data.frequency).toString() : 0);\n        let typeFrequencies = frequencyAndTotals.map(data => data.frequency);\n        let bandCounterObject = loanBandCounter(response.data.companies);\n        let bandLowerEnds = Object.keys(bandCounterObject);\n        console.log(bandLowerEnds);\n        let response4 = this.convertBandLowersToGroups(bandLowerEnds);\n        console.log(response4);\n        let bandCounters = Object.values(bandCounterObject);\n        this.setState({ ...this.state,\n          companies: response.data.companies,\n          calculationsData: {\n            averages: averages,\n            frequencies: typeFrequencies\n          }\n        });\n        let graphName = this.state.chartConfig.series[0].name;\n        if (graphName === \"Averages\" || graphName === \"\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Averages\",\n              data: averages\n            }]\n          }\n        });else if (graphName === \"Frequencies (Loan Type)\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Frequencies (Type)\",\n              data: typeFrequencies\n            }]\n          }\n        });else if (graphName === \"frequencyLoan\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Frequencies (Band)\",\n              data: typeFrequencies\n            }]\n          }\n        });\n      });\n    };\n\n    this.addLoan = async e => {\n      e.preventDefault();\n      let data = {\n        name: this.state.loanData.name,\n        amount: this.state.loanData.amount,\n        type: this.state.loanData.type,\n        otherType: this.state.loanData.otherType\n      };\n      await axios.post('http://localhost:5000/loans', data);\n      this.setState({ ...this.state,\n        loanData: this.initialFormData\n      });\n      this.getCompanies();\n    };\n\n    this.dropDownChangeHandler = e => {\n      let {\n        value\n      } = e.target;\n      console.log(value);\n\n      if (value === \"Other\") {\n        this.setState({ ...this.state,\n          loanData: { ...this.initialFormData,\n            type: value\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: false\n          }\n        });\n      } else {\n        this.setState({ ...this.state,\n          loanData: { ...this.state.loanData,\n            type: value,\n            otherType: \"\"\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: true\n          }\n        });\n      }\n    };\n\n    this.onChangeHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      this.setState({ ...this.state,\n        loanData: { ...this.state.loanData,\n          [name]: value\n        }\n      });\n    };\n\n    this.deleteCompany = async (e, companyId) => {\n      e.stopPropagation();\n      await axios.delete('http://localhost:5000/loans/' + companyId);\n      let updatedCompanies = [...this.state.companies].filter(company => company._id !== companyId);\n      this.setState({ ...this.state,\n        companies: updatedCompanies\n      });\n    };\n\n    this.inputUsed = name => {\n      if (this.state.inputClicked[name] === false) {\n        this.setState({ ...this.state,\n          inputClicked: { ...this.state.inputClicked,\n            [name]: true\n          }\n        });\n      }\n    };\n\n    this.onBlurHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      this.inputUsed(name);\n      this.isFieldValid(name, value);\n    };\n\n    this.isFieldValid = (name, value) => {\n      let validator = true;\n\n      if (value === \"\") {\n        validator = \"Please insert a value\";\n        this.setState({ ...this.state,\n          inputValidated: { ...this.state.inputValidated,\n            [name]: validator\n          }\n        });\n        return;\n      }\n\n      switch (name) {\n        case \"type\":\n          if (value === \"DEFAULT\") {\n            validator = \"Please choose a type\";\n          }\n\n          break;\n\n        case \"amount\":\n          console.log(name);\n\n          if (value < 15000) {\n            validator = \"Please insert an amount greater than Â£15000\";\n          } else if (value % 1000 !== 0) {\n            validator = \"Please insert an amount that is a multiple of 1000\";\n          }\n\n          break;\n      }\n\n      this.setState({ ...this.state,\n        inputValidated: { ...this.state.inputValidated,\n          [name]: validator\n        }\n      });\n    };\n\n    this.formValid = () => {\n      for (let key in this.state.inputValidated) {\n        if (this.state.inputValidated[key] !== true) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.changeGraph = e => {\n      switch (e.target.name) {\n        case \"average\":\n          this.setState({ ...this.state,\n            chartConfig: { ...this.state.chartConfig,\n              series: [{\n                name: \"Averages\",\n                data: this.state.calculationsData.averages\n              }]\n            },\n            activeGraph: \"Average\"\n          });\n          break;\n\n        case \"frequencyType\":\n          this.setState({ ...this.state,\n            chartConfig: { ...this.state.chartConfig,\n              series: [{\n                name: \"Frequencies (Loan Type)\",\n                data: this.state.calculationsData.frequencies\n              }]\n            },\n            activeGraph: \"Frequency (Type)\"\n          });\n          break;\n\n        default:\n          console.log(\"error\");\n      }\n    };\n\n    this.initialFormData = {\n      name: \"\",\n      amount: \"\",\n      type: \"DEFAULT\",\n      otherType: \"\"\n    };\n    this.state = {\n      chartConfig: initialChartConfig,\n      companies: [],\n      loanTypes: loanTypes,\n      loanData: this.initialFormData,\n      inputValidated: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: true\n      },\n      inputClicked: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: false\n      },\n      calculationsData: {},\n      activeGraph: \"Average\"\n    };\n  }\n\n  convertBandLowersToGroups(minValuesInBands) {\n    let groups = [];\n\n    for (let i = 0; i < minValuesInBands.length; i++) {\n      groups.push(minValuesInBands[i] + minValuesInBands[i + 1]);\n    }\n\n    return groups;\n  }\n\n  render() {\n    const {\n      companyLoanDetails,\n      setCompanyLoanDetails\n    } = this.context;\n    let companiesUI;\n\n    if (this.state.companies !== []) {\n      companiesUI = this.state.companies.map(company => {\n        return /*#__PURE__*/React.createElement(Company, {\n          showLoanDetails: e => showLoanDetails(e, company._id),\n          key: company._id,\n          name: company.name,\n          deleteCompany: e => this.deleteCompany(e, company._id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 20\n          }\n        }, company.loans.map(loan => /*#__PURE__*/React.createElement(LoanRequest, {\n          amount: loan.amount,\n          type: loan.type,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 45\n          }\n        })));\n      });\n    }\n\n    const optionElements = [/*#__PURE__*/React.createElement(\"option\", {\n      key: \"-1\",\n      value: \"DEFAULT\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 29\n      }\n    }, \"Loan Type\"), loanTypes.map((loanType, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: loanType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 124\n      }\n    }, loanType))];\n\n    const showLoanDetails = (e, companyId) => {\n      let clickedCompany = this.state.companies.find(company => company._id === companyId);\n      setCompanyLoanDetails(clickedCompany);\n      this.props.history.push('/details');\n    };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => this.addLoan(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"nameInput\",\n      label: \"Name\",\n      name: \"name\",\n      value: this.state.loanData.name,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.name,\n      inputClicked: this.state.inputClicked.name,\n      inputValidated: this.state.inputValidated.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"amountInput\",\n      label: \"Amount\",\n      name: \"amount\",\n      value: this.state.loanData.amount,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.amount,\n      inputClicked: this.state.inputClicked.amount,\n      inputValidated: this.state.inputValidated.amount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SelectAndError, {\n      id: \"loanType\",\n      label: \"Type\",\n      onBlur: e => this.onBlurHandler(e),\n      required: true,\n      name: \"type\",\n      value: this.state.loanData.type,\n      onChange: e => this.dropDownChangeHandler(e),\n      errorMessage: this.state.inputValidated.type,\n      inputClicked: this.state.inputClicked.type,\n      inputValidated: this.state.inputValidated.type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, optionElements), this.state.loanData.type === \"Other\" ? /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"otherType\",\n      label: \"Other Type\",\n      name: \"otherType\",\n      value: this.state.loanData.otherType,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.otherType,\n      inputClicked: this.state.inputClicked.otherType,\n      inputValidated: this.state.inputValidated.otherType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !this.formValid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, \"Add Loan Request\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, \"Businesses\"), this.state.companies !== [] ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, \"Click Business to Show Further Details\"), /*#__PURE__*/React.createElement(StyledUl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    }, companiesUI)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 16\n      }\n    }, \"Currently no businesses\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(StyledButton, {\n      active: this.state.activeGraph === \"Average\" ? \"isactive\" : \" \",\n      name: \"average\",\n      onClick: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, \"Average of Each Loan Type\"), /*#__PURE__*/React.createElement(StyledButton, {\n      active: this.state.activeGraph === \"Frequency (Type)\" ? \"isactive\" : \" \",\n      name: \"frequencyType\",\n      onClick: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }\n    }, \"Frequency of Each Loan Type\"), /*#__PURE__*/React.createElement(StyledButton, {\n      active: this.state.activeGraph === \"Frequency (Bands)\" ? \"isactive\" : \" \",\n      name: \"frequencyBands\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    }, \"Frequency of Loans in Each Band\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mixed-chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      options: this.state.chartConfig.options,\n      series: this.state.chartConfig.series,\n      type: \"bar\",\n      width: \"500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }))))));\n  }\n\n}\n\nLoansAndData.contextType = companyLoanContext;\nexport default LoansAndData;","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js"],"names":["React","Component","axios","loanTypeContext","companyLoanContext","Company","InputAndError","SelectAndError","LoanRequest","styled","frequencyAndTotal","loanBandCounter","Chart","loanTypes","initialChartConfig","StyledUl","ul","StyledChart","StyledButton","button","props","active","LoansAndData","componentDidMount","getCompanies","constructor","get","then","response","response2","data","companies","dataTypes","Object","keys","frequencyAndTotals","values","averages","map","frequency","Math","round","totalAmount","toString","typeFrequencies","bandCounterObject","bandLowerEnds","console","log","response4","convertBandLowersToGroups","bandCounters","setState","state","calculationsData","frequencies","graphName","chartConfig","series","name","options","xaxis","categories","addLoan","e","preventDefault","loanData","amount","type","otherType","post","initialFormData","dropDownChangeHandler","value","target","inputValidated","onChangeHandler","deleteCompany","companyId","stopPropagation","delete","updatedCompanies","filter","company","_id","inputUsed","inputClicked","onBlurHandler","isFieldValid","validator","formValid","key","changeGraph","activeGraph","minValuesInBands","groups","i","length","push","render","companyLoanDetails","setCompanyLoanDetails","context","companiesUI","showLoanDetails","loans","loan","optionElements","loanType","index","clickedCompany","find","history","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport InputAndError from '../components/inputAndError';\nimport SelectAndError from '../components/selectAndError';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { frequencyAndTotal, loanBandCounter } from '../calculationFunctions';\nimport Chart from \"react-apexcharts\";\nimport { loanTypes, initialChartConfig } from '../config';\n\n\nconst StyledUl = styled.ul`\ndisplay: flex;\nflex-direction: column;\nwidth: 400px;\nmargin-top: 5rem;\n`\n\nconst StyledChart = styled(Chart)`\nborder: black solid 1px;\nmargin: 4rem;\nwidth: 700px;\n`\n\nconst StyledButton = styled.button`\nbackground: ${props=>{\n    if(props.active===\"isactive\"){return \"blue\";}\n}};\n`\n\nclass LoansAndData extends Component {\n    static contextType = companyLoanContext\n\n    componentDidMount (){\n        this.getCompanies();\n}\n\n    constructor(props) {\n        super(props);\n        \n        this.initialFormData = {name: \"\", amount: \"\", type: \"DEFAULT\", otherType: \"\"};\n\n        this.state = {\n            chartConfig: initialChartConfig,\n            companies: [],\n            loanTypes: loanTypes,\n            loanData: this.initialFormData,\n            inputValidated: {name: false, amount: false, type: false, otherType: true},\n            inputClicked: {name: false, amount: false, type: false, otherType: false},\n            calculationsData: {},\n            activeGraph: \"Average\"\n        }\n    }\n\n\n    getCompanies = ()=>{\n        axios.get('http://localhost:5000/loans')\n        .then(response => {\n            let response2 = frequencyAndTotal(loanTypes, response.data.companies);\n            let dataTypes = Object.keys(response2);\n            let frequencyAndTotals = Object.values(response2)\n            let averages = frequencyAndTotals.map(data=> data.frequency !== 0 ? Math.round(data.totalAmount/data.frequency).toString() : 0);\n            let typeFrequencies = frequencyAndTotals.map(data=>data.frequency);\n            let bandCounterObject = loanBandCounter(response.data.companies);\n            let bandLowerEnds = Object.keys(bandCounterObject);\n            console.log(bandLowerEnds);\n            let response4 = this.convertBandLowersToGroups(bandLowerEnds);\n            console.log(response4);\n            let bandCounters = Object.values(bandCounterObject);\n            this.setState({...this.state, \n            companies: response.data.companies,\n            calculationsData: {averages: averages, frequencies: typeFrequencies}\n    })\n    let graphName = this.state.chartConfig.series[0].name;\n    if(graphName===\"Averages\"||graphName===\"\") this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Averages\", data: averages}]}});\n    else if (graphName===\"Frequencies (Loan Type)\")  this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Frequencies (Type)\", data: typeFrequencies}]}});\n    else if (graphName===\"frequencyLoan\") this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Frequencies (Band)\", data: typeFrequencies}]}});\n    \n})\n    }\n   \n    \n    convertBandLowersToGroups(minValuesInBands){\n        let groups = []\n        for(let i=0; i<minValuesInBands.length; i++){\n            groups.push(minValuesInBands[i] + minValuesInBands[i+1]); \n        }\n        return groups;\n    }\n\n\n\n\n    addLoan = async (e)=>{\n        e.preventDefault();\n        let data = {name: this.state.loanData.name, amount: this.state.loanData.amount, type: this.state.loanData.type, otherType: this.state.loanData.otherType};\n        await axios.post('http://localhost:5000/loans', data);\n        this.setState({...this.state, loanData: this.initialFormData});\n        this.getCompanies();        \n    }\n\n    dropDownChangeHandler = (e)=>{\n        let {value} = e.target;\n        console.log(value);\n        if(value===\"Other\"){\n            this.setState({...this.state, \n                loanData: {...this.initialFormData, type: value},\n                inputValidated: {...this.state.inputValidated, otherType: false}});\n        }\n        else{\n            this.setState({...this.state, \n                loanData: {...this.state.loanData, type: value, otherType: \"\"},\n                inputValidated: {...this.state.inputValidated, otherType: true}});\n        }\n    }\n\n    onChangeHandler = (e)=>{\n        let {name, value} = e.target;\n        this.setState({...this.state, loanData: {...this.state.loanData, [name]: value}});\n    }\n\n\n    deleteCompany = async (e, companyId)=>{\n        e.stopPropagation();\n        await axios.delete('http://localhost:5000/loans/' + companyId);\n        let updatedCompanies = [...this.state.companies].filter(company=>company._id!==companyId);\n        this.setState({...this.state, companies: updatedCompanies});\n    }\n\n    inputUsed = (name)=>{\n        if(this.state.inputClicked[name]===false){\n            this.setState({...this.state, inputClicked: {...this.state.inputClicked, [name]: true}});\n        }\n    }\n\n    onBlurHandler = (e)=>{\n        let {name, value} = e.target;\n        this.inputUsed(name);\n        this.isFieldValid(name, value);\n    }\n\n    isFieldValid = (name, value)=>{\n        let validator = true;\n        if(value===\"\"){\n            validator = \"Please insert a value\";\n            this.setState({...this.state, inputValidated: {...this.state.inputValidated, [name]: validator}});\n            return\n        }\n\n        switch(name) {\n\n        case \"type\":\n            if(value===\"DEFAULT\"){\n                validator = \"Please choose a type\"\n            }\n            break;\n\n        case \"amount\":\n            console.log(name);\n            if(value < 15000){\n                validator = \"Please insert an amount greater than Â£15000\"\n            }\n            else if(value%1000!==0){\n                validator = \"Please insert an amount that is a multiple of 1000\"  \n            }   \n            break;     \n    }\n    this.setState({...this.state, inputValidated: {...this.state.inputValidated, [name]: validator}});\n}\n\nformValid = ()=>{\n    for (let key in this.state.inputValidated){\n        if(this.state.inputValidated[key]!==true){\n            return false;\n        }\n    }\n    return true;\n}\n\nchangeGraph=(e)=>{\n    switch (e.target.name){\n        case \"average\":\n            this.setState({...this.state, \n                chartConfig: {...this.state.chartConfig, series: [{name: \"Averages\", data: this.state.calculationsData.averages}]},\n                activeGraph: \"Average\"\n            });\n\n            break;\n        case \"frequencyType\":\n            this.setState({...this.state, \n                chartConfig: {...this.state.chartConfig, series: [{name: \"Frequencies (Loan Type)\", data: this.state.calculationsData.frequencies}]},\n                activeGraph: \"Frequency (Type)\"\n        });\n            break;\n        default:\n            console.log(\"error\");       \n    }\n}\n\n\n  \n   \n    render(){\n\n        const { companyLoanDetails, setCompanyLoanDetails } = this.context\n        let companiesUI;\n    if(this.state.companies!==[]){\n        companiesUI = this.state.companies.map(company=>{\n            return <Company showLoanDetails={(e)=>showLoanDetails(e, company._id)} key={company._id} name = {company.name} deleteCompany={(e)=>this.deleteCompany(e, company._id)}>\n                {company.loans.map((loan)=> <LoanRequest amount={loan.amount} type={loan.type}/>)}\n            </Company>\n        })\n    }\n    const optionElements = [<option key=\"-1\" value=\"DEFAULT\" disabled>Loan Type</option>, loanTypes.map((loanType, index)=><option key={index} value={loanType}>{loanType}</option>)];\n\n    const showLoanDetails = (e, companyId)=>{\n        let clickedCompany = this.state.companies.find(company=> company._id===companyId);\n        setCompanyLoanDetails(clickedCompany);\n        this.props.history.push('/details');\n        \n    }\n\n    return(\n        <>\n        <form onSubmit={(e)=>this.addLoan(e)} >\n            <InputAndError id=\"nameInput\" label=\"Name\" name=\"name\" value={this.state.loanData.name} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.name} inputClicked={this.state.inputClicked.name} inputValidated={this.state.inputValidated.name}/>\n            <InputAndError id=\"amountInput\" label=\"Amount\" name=\"amount\" value={this.state.loanData.amount} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.amount} inputClicked={this.state.inputClicked.amount} inputValidated={this.state.inputValidated.amount}/>\n            <SelectAndError id=\"loanType\" label=\"Type\" onBlur={(e)=>this.onBlurHandler(e)} required name=\"type\" value={this.state.loanData.type} onChange={(e)=>this.dropDownChangeHandler(e)} errorMessage={this.state.inputValidated.type} inputClicked={this.state.inputClicked.type} inputValidated={this.state.inputValidated.type}>\n                {optionElements}\n            </SelectAndError>\n            {this.state.loanData.type===\"Other\" ? \n            <InputAndError id=\"otherType\" label=\"Other Type\" name=\"otherType\" value={this.state.loanData.otherType} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.otherType} inputClicked={this.state.inputClicked.otherType} inputValidated={this.state.inputValidated.otherType}/>\n            : null}\n            <button disabled={!this.formValid()}>Add Loan Request</button>\n        </form>\n        <div>\n            <h1>Businesses</h1>\n            \n            {this.state.companies!==[] ?\n            <> \n            <p>Click Business to Show Further Details</p>\n            <StyledUl>{companiesUI}</StyledUl>\n            </>\n             : <p>Currently no businesses</p>}\n        </div>\n            <div>\n                <div>\n                    <StyledButton active={this.state.activeGraph === \"Average\" ? \"isactive\" : \" \"} name=\"average\" onClick={(e)=>this.changeGraph(e)}>Average of Each Loan Type</StyledButton>  \n                    <StyledButton active={this.state.activeGraph === \"Frequency (Type)\" ? \"isactive\" : \" \"} name=\"frequencyType\" onClick={(e)=>this.changeGraph(e)}>Frequency of Each Loan Type</StyledButton>\n                    <StyledButton active={this.state.activeGraph === \"Frequency (Bands)\" ? \"isactive\" : \" \"} name=\"frequencyBands\">Frequency of Loans in Each Band</StyledButton>\n                </div>\n                <div className=\"app\">\n          <div className=\"row\">\n            <div className=\"mixed-chart\">\n              <Chart\n                options={this.state.chartConfig.options}\n                series={this.state.chartConfig.series}\n                type=\"bar\"\n                width=\"500\"\n              />\n            </div>\n          </div>\n        </div>\n            </div>\n        </>\n    )\n}; \n}\n\nexport default LoansAndData;"]},"metadata":{},"sourceType":"module"}
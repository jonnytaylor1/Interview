{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/loansAndData.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\n\nconst LoansAndData = props => {\n  const [companies, setCompanies] = useState([]);\n  const startFormData = {\n    name: \"\",\n    amount: \"\",\n    type: \"DEFAULT\",\n    otherType: \"\"\n  };\n  const {\n    loanTypes\n  } = useContext(loanTypeContext);\n  const [loanData, setLoanData] = useState(startFormData);\n  const [otherType, setOtherType] = useState(false);\n  const {\n    companyLoanDetails,\n    setCompanyLoanDetails\n  } = useContext(companyLoanContext);\n  const [inputValidated, setInputValidated] = useState({\n    name: false,\n    amount: false,\n    type: false,\n    otherType: true\n  });\n  const [inputClicked, setInputClicked] = useState({\n    name: false,\n    amount: false,\n    type: false,\n    otherType: false\n  });\n  useEffect(() => {\n    getCompanies();\n  }, []);\n\n  const getCompanies = async () => {\n    let response = await axios.get('http://localhost:5000/loans');\n    setCompanies(response.data.companies);\n  };\n\n  const addLoan = async e => {\n    e.preventDefault();\n    let data = {\n      name: loanData.name,\n      amount: loanData.amount,\n      type: loanData.type,\n      otherType: loanData.otherType\n    };\n    await axios.post('http://localhost:5000/loans', data);\n    setLoanData(startFormData);\n    getCompanies();\n  };\n\n  const dropDownChangeHandler = e => {\n    let {\n      value\n    } = e.target;\n\n    if (value === \"Other\") {\n      setLoanData({ ...loanData,\n        type: value\n      });\n      setInputValidated({ ...inputValidated,\n        otherType: false\n      });\n    } else {\n      setLoanData({ ...loanData,\n        type: value,\n        otherType: \"\"\n      });\n      setInputValidated({ ...inputValidated,\n        otherType: true\n      });\n    }\n  };\n\n  const onChangeHandler = e => {\n    let {\n      name,\n      value\n    } = e.target;\n    setLoanData({ ...loanData,\n      [name]: value\n    });\n  };\n\n  const showLoanDetails = companyId => {\n    let clickedCompany = companies.find(company => company._id === companyId);\n    setCompanyLoanDetails(clickedCompany);\n  };\n\n  const deleteCompany = async companyId => {\n    await axios.delete('http://localhost:5000/loans/' + companyId);\n    let updatedCompanies = [...companies].filter(company => company._id !== companyId);\n    setCompanies(updatedCompanies);\n  };\n\n  const inputUsed = name => {\n    if (inputClicked.name === false) {\n      setInputClicked({ ...inputClicked,\n        [name]: true\n      });\n    }\n  };\n\n  const isFieldValid = e => {\n    let {\n      name,\n      value\n    } = e.target;\n    let validator = true;\n\n    if (value === \"\") {\n      validator = \"Please insert a value\";\n      setInputValidated({ ...inputValidated,\n        [name]: validator\n      });\n      return;\n    }\n\n    switch (name) {\n      case \"type\":\n        if (value === \"DEFAULT\") {\n          validator = \"Please choose a type\";\n        }\n\n        break;\n\n      case \"amount\":\n        console.log(name);\n\n        if (value < 15000) {\n          validator = \"Please insert an amount greater than Â£15000\";\n        } else if (value % 1000 !== 0) {\n          validator = \"Please insert an amount that is a multiple of 1000\";\n        }\n\n        break;\n    }\n\n    setInputValidated({ ...inputValidated,\n      [name]: validator\n    });\n  };\n\n  let formValid = () => {\n    for (let key in inputValidated) {\n      if (inputValidated[key] !== true) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  let companiesUI;\n\n  if (companies !== []) {\n    companiesUI = companies.map(company => {\n      return /*#__PURE__*/React.createElement(Company, {\n        showLoanDetails: () => showLoanDetails(company._id),\n        key: company._id,\n        name: company.name,\n        deleteCompany: () => deleteCompany(company._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  const optionElements = loanTypes.map((loanType, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: loanType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 61\n    }\n  }, loanType));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => addLoan(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"nameInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"nameInput\",\n    onBlur: e => isFieldValid(e),\n    required: true,\n    value: loanData.name,\n    name: \"name\",\n    onChange: e => onChangeHandler(e),\n    placeholder: \"Business Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), inputValidated.name !== true ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 43\n    }\n  }, \"Error\") : null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"amountInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"amountInput\",\n    onBlur: e => isFieldValid(e),\n    type: \"number\",\n    required: true,\n    value: loanData.amount,\n    name: \"amount\",\n    onChange: e => onChangeHandler(e),\n    placeholder: \"Loan Amount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"loanType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"loanType\",\n    onBlur: e => isFieldValid(e),\n    required: true,\n    name: \"type\",\n    value: loanData.type,\n    onChange: e => dropDownChangeHandler(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"DEFAULT\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Loan Type\"), optionElements), loanData.type === \"Other\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"typeDetails\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Type Details\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"typeDetails\",\n    onBlur: e => isFieldValid(e),\n    required: true,\n    value: loanData.otherType,\n    name: \"otherType\",\n    onChange: e => {\n      onChangeHandler(e);\n    },\n    placeholder: \"Type Details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  })) : null, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !formValid(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, \"Add Loan Request\")), companies !== [] ? companiesUI : null, JSON.stringify(inputValidated));\n};\n\nexport default LoansAndData;","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/loansAndData.js"],"names":["React","useEffect","useState","useContext","axios","loanTypeContext","companyLoanContext","Company","LoansAndData","props","companies","setCompanies","startFormData","name","amount","type","otherType","loanTypes","loanData","setLoanData","setOtherType","companyLoanDetails","setCompanyLoanDetails","inputValidated","setInputValidated","inputClicked","setInputClicked","getCompanies","response","get","data","addLoan","e","preventDefault","post","dropDownChangeHandler","value","target","onChangeHandler","showLoanDetails","companyId","clickedCompany","find","company","_id","deleteCompany","delete","updatedCompanies","filter","inputUsed","isFieldValid","validator","console","log","formValid","key","companiesUI","map","optionElements","loanType","index","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\n\nconst LoansAndData = (props) => {\n    const [companies, setCompanies] = useState([]); \n    const startFormData = {name: \"\", amount: \"\", type: \"DEFAULT\", otherType: \"\"};\n    const {loanTypes} = useContext(loanTypeContext);\n    const [loanData, setLoanData] = useState(startFormData);\n    const [otherType, setOtherType] = useState(false);\n    const {companyLoanDetails, setCompanyLoanDetails} = useContext(companyLoanContext);\n    const [inputValidated, setInputValidated] = useState({name: false, amount: false, type: false, otherType: true})\n    const [inputClicked, setInputClicked] = useState({name: false, amount: false, type: false, otherType: false});\n\n    useEffect(()=> {\n        getCompanies();\n    }, [])\n\n    const getCompanies = async ()=>{\n        let response = await axios.get('http://localhost:5000/loans');\n        setCompanies(response.data.companies);\n    }\n\n    const addLoan = async (e)=>{\n        e.preventDefault();\n        let data = {name: loanData.name, amount: loanData.amount, type: loanData.type, otherType: loanData.otherType};\n        await axios.post('http://localhost:5000/loans', data);\n        setLoanData(startFormData);\n        getCompanies();        \n    }\n\n    const dropDownChangeHandler = (e)=>{\n        let {value} = e.target;\n        if(value===\"Other\"){\n            setLoanData({...loanData, type: value})\n            setInputValidated({...inputValidated, otherType: false})\n        }\n        else{\n            setLoanData({...loanData, type: value, otherType: \"\"});\n            setInputValidated({...inputValidated, otherType: true})\n        }\n    }\n\n    const onChangeHandler = (e)=>{\n        let {name, value} = e.target;\n        setLoanData({...loanData, [name]: value});\n    }\n\n    const showLoanDetails = (companyId)=>{\n        let clickedCompany = companies.find(company=> company._id===companyId);\n        setCompanyLoanDetails(clickedCompany);\n    }\n    const deleteCompany = async (companyId)=>{\n        await axios.delete('http://localhost:5000/loans/' + companyId);\n        let updatedCompanies = [...companies].filter(company=>company._id!==companyId);\n        setCompanies(updatedCompanies);\n    }\n\n    const inputUsed = (name)=>{\n        if(inputClicked.name===false){\n            setInputClicked({...inputClicked, [name]: true})\n        }\n    }\n\n    const isFieldValid = (e)=>{\n        let {name,value} = e.target;\n        let validator = true;\n        if(value===\"\"){\n            validator = \"Please insert a value\";\n            setInputValidated({...inputValidated, [name]: validator});\n            return\n        }\n\n        switch(name) {\n\n        case \"type\":\n            if(value===\"DEFAULT\"){\n                validator = \"Please choose a type\"\n            }\n            break;\n\n        case \"amount\":\n            console.log(name);\n            if(value < 15000){\n                validator = \"Please insert an amount greater than Â£15000\"\n            }\n            else if(value%1000!==0){\n                validator = \"Please insert an amount that is a multiple of 1000\"  \n            }   \n            break;     \n    }\n    setInputValidated({...inputValidated, [name]: validator});\n}\n\nlet formValid = ()=>{\n    for (let key in inputValidated){\n        if(inputValidated[key]!==true){\n            return false;\n        }\n    }\n    return true;\n}\n\n\n  let companiesUI;\n    if(companies!==[]){\n        companiesUI = companies.map(company=>{\n            return <Company showLoanDetails={()=>showLoanDetails(company._id)} key={company._id} name = {company.name} deleteCompany={()=>deleteCompany(company._id)}/>\n        })\n    }\n   \n    const optionElements = loanTypes.map((loanType, index)=><option key={index} value={loanType}>{loanType}</option>)\n\n\n\n    return(\n        <>\n        <form onSubmit={(e)=>addLoan(e)} >\n            <label htmlFor=\"nameInput\">Name</label>\n            <input id=\"nameInput\" onBlur={(e)=>isFieldValid(e)} required value={loanData.name} name=\"name\" onChange={(e)=>onChangeHandler(e)} placeholder=\"Business Name\"/>\n            {inputValidated.name!==true ? <p>Error</p>:null}\n            <label htmlFor=\"amountInput\">Amount</label>\n            <input id=\"amountInput\" onBlur={(e)=>isFieldValid(e)} type=\"number\" required value={loanData.amount} name=\"amount\" onChange={(e)=>onChangeHandler(e)} placeholder=\"Loan Amount\" />\n            <label htmlFor=\"loanType\">Type</label>\n            <select id=\"loanType\" onBlur={(e)=>isFieldValid(e)} required name=\"type\" value={loanData.type} onChange={(e)=>dropDownChangeHandler(e)}>\n            <option value=\"DEFAULT\" disabled>Loan Type</option>\n                {optionElements}\n            </select>\n            {loanData.type===\"Other\" ? \n            <>\n            <label htmlFor=\"typeDetails\">Type Details</label>\n            <input id=\"typeDetails\" onBlur={(e)=>isFieldValid(e)} required value={loanData.otherType} name=\"otherType\" onChange={(e)=>{onChangeHandler(e)}} placeholder=\"Type Details\"/>\n            </>\n            : null}\n            <button disabled={!formValid()}>Add Loan Request</button>\n        </form>\n        {companies!==[] ? companiesUI: null}\n        {JSON.stringify(inputValidated)}\n        </>\n    )\n}; \n\nexport default LoansAndData;"]},"metadata":{},"sourceType":"module"}
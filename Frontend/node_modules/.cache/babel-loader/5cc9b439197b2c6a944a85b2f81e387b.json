{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport InputAndError from '../components/inputAndError';\nimport SelectAndError from '../components/selectAndError';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { frequencyAndTotal, loanBandCounter } from '../calculationFunctions';\nimport { loanTypes, initialChartConfig, bandCounter, bandGroups } from '../config';\nimport { isFormValid, isFieldValid } from '../formValidation';\nimport AllCharts from '../components/chart';\nimport AddLoanForm from '../components/AddLoanForm';\nconst StyledUl = styled.ul`\ndisplay: flex;\nwidth: 100%;\nflex-direction: column;\noverflow-y: scroll;\n`;\nexport const StyledButton = styled.button`\nbackground: ${props => {\n  if (props.active === \"isactive\") return \"blue\";else return props.background;\n}};\n:disabled {\n    background: grey;\n    cursor: not-allowed;\n}\n`;\nexport const ChartButton = styled(StyledButton)`\nwidth: calc(100%/3);\n`;\nconst StyledInnerDiv = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 600px;\n`;\nconst StyledOuterDiv = styled.div`\ndisplay: flex;\nmargin: 5rem 5rem 0 5rem;\ngap: 5rem;\nmax-height: calc(100vh - 7rem);\n`;\n\nclass LoansAndData extends Component {\n  componentDidMount() {\n    this.getCompanies();\n  }\n\n  constructor(props) {\n    super(props);\n    this.initialFormData = {\n      name: \"\",\n      amount: \"\",\n      type: \"DEFAULT\",\n      otherType: \"\"\n    };\n    this.state = {\n      chartConfig: initialChartConfig,\n      companies: [],\n      calculationsData: {},\n      activeGraph: \"Average\",\n      loanData: this.initialFormData,\n      inputValidated: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: true\n      },\n      inputClicked: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: false\n      }\n    };\n\n    getCompanies = () => {\n      axios.get('http://localhost:5000/loans').then(response => {\n        //Creates the averages and total of each loan type data\n        let frequencyAndTotalData = frequencyAndTotal(loanTypes, response.data.companies);\n        let dataTypes = Object.keys(frequencyAndTotalData);\n        let frequencyAndTotals = Object.values(frequencyAndTotalData);\n        let averages = frequencyAndTotals.map(data => data.frequency !== 0 ? Math.round(data.totalAmount / data.frequency).toString() : 0);\n        let typeFrequencies = frequencyAndTotals.map(data => data.frequency); //Creates the loan band data\n\n        let bandCounterObject = loanBandCounter(response.data.companies, bandCounter);\n        let bandFrequencies = Object.values(bandCounterObject); //Updates the company state\n\n        this.setState({ ...this.state,\n          companies: response.data.companies.reverse(),\n          calculationsData: {\n            averages: averages,\n            frequencies: typeFrequencies,\n            bandFrequencies: bandFrequencies\n          }\n        }); //Updates the graph data\n\n        let graphName = this.state.chartConfig.series[0].name;\n        if (graphName === \"Averages\" || graphName === \"\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Averages\",\n              data: averages\n            }]\n          }\n        });else if (graphName === \"Frequency (Type)\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Frequency (Type)\",\n              data: typeFrequencies\n            }]\n          }\n        });else if (graphName === \"Frequency (Band)\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: bandGroups\n              }\n            },\n            series: [{\n              name: \"Frequency (Band)\",\n              data: bandFrequencies\n            }]\n          }\n        });\n      });\n    };\n\n    addLoan = async e => {\n      e.preventDefault();\n      await axios.post('http://localhost:5000/loans', this.state.loanData);\n      this.setState({ ...this.state,\n        loanData: this.initialFormData\n      });\n      this.getCompanies();\n    };\n\n    dropDownChangeHandler = e => {\n      let {\n        value\n      } = e.target;\n\n      if (value === \"Other\") {\n        this.setState({ ...this.state,\n          loanData: { ...this.state.loanData,\n            type: value\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: false\n          }\n        });\n      } else {\n        this.setState({ ...this.state,\n          loanData: { ...this.state.loanData,\n            type: value,\n            otherType: \"\"\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: true\n          }\n        });\n      }\n    };\n\n    onChangeHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      this.setState({ ...this.state,\n        loanData: { ...this.state.loanData,\n          [name]: value\n        }\n      });\n    };\n\n    onBlurHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      let validator = isFieldValid(name, value);\n      this.setState({ ...this.state,\n        inputClicked: { ...this.state.inputClicked,\n          [name]: true\n        },\n        inputValidated: { ...this.state.inputValidated,\n          [name]: validator\n        }\n      });\n    };\n\n    deleteCompany = async (e, companyId) => {\n      e.stopPropagation();\n      await axios.delete('http://localhost:5000/loans/' + companyId); //If more time I would use this to update the array instead of calling from the database\n      // let updatedCompanies = [...this.state.companies].filter(company=>company._id!==companyId);\n      // this.setState({...this.state, companies: updatedCompanies});\n\n      this.getCompanies();\n    };\n\n    changeGraph = e => {\n      let name;\n      let data;\n      let categories;\n      let activeGraph;\n\n      switch (e.target.name) {\n        case \"average\":\n          name = \"Averages\";\n          data = this.state.calculationsData.averages;\n          categories = loanTypes;\n          activeGraph = \"Average\";\n          break;\n\n        case \"frequencyType\":\n          name = \"Frequency (Type)\";\n          data = this.state.calculationsData.frequencies;\n          categories = loanTypes;\n          activeGraph = \"Frequency (Type)\";\n          break;\n\n        case \"frequencyBands\":\n          name = \"Frequency (Band)\";\n          data = this.state.calculationsData.bandFrequencies;\n          categories = bandGroups;\n          activeGraph = \"Frequency (Band)\";\n          break;\n\n        default:\n          console.log(\"error\");\n      }\n    };\n\n    this.setState({ ...this.state,\n      chartConfig: { ...this.state.chartConfig,\n        options: { ...this.state.chartConfig.options,\n          xaxis: { ...this.state.chartConfig.options.xaxis,\n            categories: categories\n          }\n        },\n        series: [{\n          name: name,\n          data: data\n        }]\n      },\n      activeGraph: activeGraph\n    });\n  }\n\n  render() {\n    const {\n      companyLoanDetails,\n      setCompanyLoanDetails\n    } = this.context;\n\n    const showLoanDetails = (e, companyId) => {\n      let clickedCompany = this.state.companies.find(company => company._id === companyId);\n      setCompanyLoanDetails(clickedCompany);\n      this.props.history.push('/details');\n    };\n\n    let companiesUI;\n\n    if (this.state.companies.length !== 0) {\n      companiesUI = this.state.companies.map(company => {\n        return /*#__PURE__*/React.createElement(Company, {\n          showLoanDetails: e => showLoanDetails(e, company._id),\n          key: company._id,\n          name: company.name,\n          deleteCompany: e => this.deleteCompany(e, company._id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 20\n          }\n        }, company.loans.map(loan => /*#__PURE__*/React.createElement(LoanRequest, {\n          amount: loan.amount,\n          type: loan.type,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 45\n          }\n        })));\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledOuterDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(StyledInnerDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, \"Businesses\"), this.state.companies.length !== 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, \"Click Business to Show Further Details\"), /*#__PURE__*/React.createElement(StyledUl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, companiesUI)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }\n    }, \"Currently no businesses\")), /*#__PURE__*/React.createElement(AllCharts, {\n      series: this.state.chartConfig.series,\n      options: this.state.chartConfig.options,\n      activeGraph: this.state.activeGraph,\n      onChange: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(AddLoanForm, {\n      loanData: this.state.loanData,\n      inputClicked: this.state.inputClicked,\n      inputValidated: this.state.inputValidated,\n      dropdownChange: e => this.dropDownChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      onChange: e => this.onChangeHandler(e),\n      submit: e => this.addLoan(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nLoansAndData.contextType = companyLoanContext;\nexport default LoansAndData;","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js"],"names":["React","Component","axios","loanTypeContext","companyLoanContext","Company","InputAndError","SelectAndError","LoanRequest","styled","frequencyAndTotal","loanBandCounter","loanTypes","initialChartConfig","bandCounter","bandGroups","isFormValid","isFieldValid","AllCharts","AddLoanForm","StyledUl","ul","StyledButton","button","props","active","background","ChartButton","StyledInnerDiv","div","StyledOuterDiv","LoansAndData","componentDidMount","getCompanies","constructor","initialFormData","name","amount","type","otherType","state","chartConfig","companies","calculationsData","activeGraph","loanData","inputValidated","inputClicked","get","then","response","frequencyAndTotalData","data","dataTypes","Object","keys","frequencyAndTotals","values","averages","map","frequency","Math","round","totalAmount","toString","typeFrequencies","bandCounterObject","bandFrequencies","setState","reverse","frequencies","graphName","series","options","xaxis","categories","addLoan","e","preventDefault","post","dropDownChangeHandler","value","target","onChangeHandler","onBlurHandler","validator","deleteCompany","companyId","stopPropagation","delete","changeGraph","console","log","render","companyLoanDetails","setCompanyLoanDetails","context","showLoanDetails","clickedCompany","find","company","_id","history","push","companiesUI","length","loans","loan","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport InputAndError from '../components/inputAndError';\nimport SelectAndError from '../components/selectAndError';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { frequencyAndTotal, loanBandCounter } from '../calculationFunctions';\nimport { loanTypes, initialChartConfig, bandCounter, bandGroups } from '../config';\nimport { isFormValid, isFieldValid } from '../formValidation';\nimport AllCharts from '../components/chart';\nimport AddLoanForm from '../components/AddLoanForm';\n\nconst StyledUl = styled.ul`\ndisplay: flex;\nwidth: 100%;\nflex-direction: column;\noverflow-y: scroll;\n`\n\n\n\nexport const StyledButton = styled.button`\nbackground: ${props=>{\n    if(props.active===\"isactive\") return \"blue\";\n    else return props.background\n}};\n:disabled {\n    background: grey;\n    cursor: not-allowed;\n}\n`\n\nexport const ChartButton = styled(StyledButton)`\nwidth: calc(100%/3);\n`\n\n\n\nconst StyledInnerDiv = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 600px;\n`\n\nconst StyledOuterDiv = styled.div`\ndisplay: flex;\nmargin: 5rem 5rem 0 5rem;\ngap: 5rem;\nmax-height: calc(100vh - 7rem);\n`\n\n\nclass LoansAndData extends Component {\n    static contextType = companyLoanContext\n\n    componentDidMount (){this.getCompanies();}\n\n    constructor(props) {\n        super(props);\n        this.initialFormData = {name: \"\", amount: \"\", type: \"DEFAULT\", otherType: \"\"};\n        this.state = {\n            chartConfig: initialChartConfig,\n            companies: [],\n            calculationsData: {},\n            activeGraph: \"Average\",\n            loanData: this.initialFormData,\n            inputValidated: {name: false, amount: false, type: false, otherType: true},\n            inputClicked: {name: false, amount: false, type: false, otherType: false}\n        }\n    \n\n    getCompanies = ()=>{\n        axios.get('http://localhost:5000/loans')\n        .then(response => {\n            //Creates the averages and total of each loan type data\n            let frequencyAndTotalData = frequencyAndTotal(loanTypes, response.data.companies);\n            let dataTypes = Object.keys(frequencyAndTotalData);\n            let frequencyAndTotals = Object.values(frequencyAndTotalData);\n            let averages = frequencyAndTotals.map(data=> data.frequency !== 0 ? Math.round(data.totalAmount/data.frequency).toString() : 0);\n            let typeFrequencies = frequencyAndTotals.map(data=>data.frequency);\n            //Creates the loan band data\n            let bandCounterObject = loanBandCounter(response.data.companies, bandCounter);\n            let bandFrequencies = Object.values(bandCounterObject);\n            //Updates the company state\n            this.setState({...this.state, \n                companies: response.data.companies.reverse(),\n                calculationsData: {averages: averages, frequencies: typeFrequencies, bandFrequencies: bandFrequencies}\n            })\n            //Updates the graph data\n            let graphName = this.state.chartConfig.series[0].name;\n            if(graphName===\"Averages\"||graphName===\"\") this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Averages\", data: averages}]}});\n            else if (graphName===\"Frequency (Type)\")  this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Frequency (Type)\", data: typeFrequencies}]}});\n            else if (graphName===\"Frequency (Band)\") this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: bandGroups}}, series: [{name:\"Frequency (Band)\", data: bandFrequencies}]}});\n})\n    }\n   \n    \n    addLoan = async (e)=>{\n        e.preventDefault();\n        await axios.post('http://localhost:5000/loans', this.state.loanData);\n        this.setState({...this.state, loanData: this.initialFormData});\n        this.getCompanies();        \n    }\n\n    dropDownChangeHandler = (e)=>{\n        let {value} = e.target;\n        if(value===\"Other\"){\n            this.setState({...this.state, \n                loanData: {...this.state.loanData, type: value},\n                inputValidated: {...this.state.inputValidated, otherType: false}});\n        }\n        else{\n            this.setState({...this.state, \n                loanData: {...this.state.loanData, type: value, otherType: \"\"},\n                inputValidated: {...this.state.inputValidated, otherType: true}});\n        }\n    }\n\n    onChangeHandler = (e)=>{\n        let {name, value} = e.target;\n        this.setState({...this.state, loanData: {...this.state.loanData, [name]: value}});\n    }\n\n    onBlurHandler = (e)=>{\n        let {name, value} = e.target;\n        let validator = isFieldValid(name, value);\n\n        this.setState({...this.state, \n            inputClicked: {...this.state.inputClicked, [name]: true},\n            inputValidated: {...this.state.inputValidated, [name]: validator}\n        })\n    }\n\n   \n    deleteCompany = async (e, companyId)=>{\n        e.stopPropagation();\n        await axios.delete('http://localhost:5000/loans/' + companyId);\n        //If more time I would use this to update the array instead of calling from the database\n        // let updatedCompanies = [...this.state.companies].filter(company=>company._id!==companyId);\n        // this.setState({...this.state, companies: updatedCompanies});\n        this.getCompanies();\n    }\n\n  \n    changeGraph=(e)=>{\n        let name;\n        let data;\n        let categories;\n        let activeGraph;\n        switch (e.target.name){\n            case \"average\":\n                name = \"Averages\";\n                data = this.state.calculationsData.averages;\n                categories = loanTypes;\n                activeGraph = \"Average\"\n                break;\n            case \"frequencyType\":\n                name = \"Frequency (Type)\";\n                data = this.state.calculationsData.frequencies;\n                categories = loanTypes;\n                activeGraph = \"Frequency (Type)\"\n                break;\n            \n            case \"frequencyBands\":\n                name = \"Frequency (Band)\";\n                data = this.state.calculationsData.bandFrequencies;\n                categories = bandGroups;\n                activeGraph = \"Frequency (Band)\"\n                break;\n            default:\n                console.log(\"error\");     \n    }\n}\n\nthis.setState({...this.state, \n        chartConfig: {...this.state.chartConfig, options:{...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: categories}}, series: [{name: name, data: data}]},\n        activeGraph: activeGraph\n});\n    }\n    render(){\n        const { companyLoanDetails, setCompanyLoanDetails } = this.context\n        \n        const showLoanDetails = (e, companyId)=>{\n        let clickedCompany = this.state.companies.find(company=> company._id===companyId);\n        setCompanyLoanDetails(clickedCompany);\n        this.props.history.push('/details');\n    }\n\n    let companiesUI;\n    if(this.state.companies.length!==0){\n        companiesUI = this.state.companies.map(company=>{\n            return <Company showLoanDetails={(e)=>showLoanDetails(e, company._id)} key={company._id} name = {company.name} deleteCompany={(e)=>this.deleteCompany(e, company._id)}>\n                {company.loans.map((loan)=> <LoanRequest amount={loan.amount} type={loan.type}/>)}\n            </Company>\n        })\n    }\n\n    return(\n        <>\n        <StyledOuterDiv>\n            <StyledInnerDiv>\n                <h1>Businesses</h1>\n                {this.state.companies.length!==0 ?\n                <> \n                <p>Click Business to Show Further Details</p>\n                <StyledUl>{companiesUI}</StyledUl>\n                </>\n                : <p>Currently no businesses</p>}\n            </StyledInnerDiv>\n            <AllCharts  series={this.state.chartConfig.series} options={this.state.chartConfig.options} activeGraph={this.state.activeGraph} onChange={(e)=>this.changeGraph(e)}/>\n            <AddLoanForm loanData={this.state.loanData} inputClicked={this.state.inputClicked} inputValidated={this.state.inputValidated} dropdownChange={(e)=>this.dropDownChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} onChange={(e)=>this.onChangeHandler(e)} submit={(e)=>this.addLoan(e)}/> \n        </StyledOuterDiv>\n        </>\n    )\n}; \n}\n\nexport default LoansAndData;"]},"metadata":{},"sourceType":"module"}
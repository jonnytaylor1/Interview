{"ast":null,"code":"export const average = (type, info) => {\n  let number = 0;\n  let total = 0;\n  info.forEach(business => {\n    business.loans.forEach(loan => {\n      if (loan.type === type) {\n        total += loan.amount;\n        number += 1;\n      }\n    });\n  });\n  let averageLoan = total / number;\n  return [averageLoan, total];\n}; //Return {\"type\": [average, total]}\n\nexport const loanBandCounter = companies => {\n  let bandCounter = {\n    15000: 0,\n    25000: 0,\n    50000: 0,\n    100000: 0,\n    250000: 0,\n    500000: 0,\n    750000: 0,\n    1000000: 0,\n    2000000: 0\n  };\n  let bands = Object.keys(bandCounter);\n  companies.forEach(company => {\n    company.loans.forEach(loan => {\n      for (let i = bands.length - 1; i >= 0; i--) {\n        if (loan.amount >= bands[i]) {\n          bandCounter[bands[i]] += 1;\n          return;\n        }\n      }\n    });\n  });\n  return bandCounter;\n};","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/calculationFunctions.js"],"names":["average","type","info","number","total","forEach","business","loans","loan","amount","averageLoan","loanBandCounter","companies","bandCounter","bands","Object","keys","company","i","length"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAE,CAACC,IAAD,EAAOC,IAAP,KAAc;AAChC,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,KAAK,GAAG,CAAZ;AACAF,EAAAA,IAAI,CAACG,OAAL,CAAaC,QAAQ,IAAI;AACrBA,IAAAA,QAAQ,CAACC,KAAT,CAAeF,OAAf,CAAuBG,IAAI,IAAE;AACzB,UAAGA,IAAI,CAACP,IAAL,KAAcA,IAAjB,EAAsB;AAClBG,QAAAA,KAAK,IAAII,IAAI,CAACC,MAAd;AACAN,QAAAA,MAAM,IAAI,CAAV;AACH;AACF,KALH;AAMC,GAPL;AASA,MAAIO,WAAW,GAAGN,KAAK,GAACD,MAAxB;AAEA,SAAO,CAACO,WAAD,EAAcN,KAAd,CAAP;AACH,CAfM,C,CAiBP;;AAGA,OAAO,MAAMO,eAAe,GAAIC,SAAD,IAAa;AACxC,MAAIC,WAAW,GAAG;AAAC,WAAO,CAAR;AAAW,WAAO,CAAlB;AAAqB,WAAO,CAA5B;AAA+B,YAAQ,CAAvC;AAA0C,YAAQ,CAAlD;AAAqD,YAAQ,CAA7D;AAAgE,YAAQ,CAAxE;AAA2E,aAAS,CAApF;AAAuF,aAAS;AAAhG,GAAlB;AACA,MAAIC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAZ;AACAD,EAAAA,SAAS,CAACP,OAAV,CAAkBY,OAAO,IAAE;AACzBA,IAAAA,OAAO,CAACV,KAAR,CAAcF,OAAd,CAAsBG,IAAI,IAAE;AACxB,WAAI,IAAIU,CAAC,GAACJ,KAAK,CAACK,MAAN,GAAa,CAAvB,EAA0BD,CAAC,IAAE,CAA7B,EAAgCA,CAAC,EAAjC,EAAoC;AAChC,YAAGV,IAAI,CAACC,MAAL,IAAeK,KAAK,CAACI,CAAD,CAAvB,EAA4B;AACxBL,UAAAA,WAAW,CAACC,KAAK,CAACI,CAAD,CAAN,CAAX,IAAyB,CAAzB;AACA;AACP;AACF;AACJ,KAPC;AAQL,GATG;AAUJ,SAAOL,WAAP;AAAmB,CAbZ","sourcesContent":["export const average= (type, info)=>{\n    let number = 0;\n    let total = 0;\n    info.forEach(business => {\n        business.loans.forEach(loan=>{\n            if(loan.type === type){\n                total += loan.amount;\n                number += 1;\n            }\n          })\n        })\n    \n    let averageLoan = total/number;\n\n    return [averageLoan, total];\n}\n\n//Return {\"type\": [average, total]}\n\n \nexport const loanBandCounter = (companies)=>{\n    let bandCounter = {15000: 0, 25000: 0, 50000: 0, 100000: 0, 250000: 0, 500000: 0, 750000: 0, 1000000: 0, 2000000: 0};\n    let bands = Object.keys(bandCounter);\n    companies.forEach(company=>{\n      company.loans.forEach(loan=>{\n          for(let i=bands.length-1; i>=0; i--){\n              if(loan.amount >= bands[i]) {\n                  bandCounter[bands[i]] += 1;\n                  return;\n          }\n        }\n    })\n})\nreturn bandCounter}\n\n\n\n"]},"metadata":{},"sourceType":"module"}
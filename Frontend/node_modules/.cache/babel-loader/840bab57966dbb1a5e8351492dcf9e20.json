{"ast":null,"code":"//Checks if a field is valid, if not returns the error message\nexport const isFieldValid = (name, value) => {\n  let validator = true;\n  if (value === \"\") return \"Please insert a value\";\n\n  switch (name) {\n    case \"type\":\n      if (value === \"DEFAULT\") validator = \"Please choose a type\";\n      break;\n\n    case \"amount\":\n      if (value < 15000) validator = \"Insert value greater than £15000\";else if (value % 1000 !== 0) validator = \"Must be a multiple of 1000\";\n      break;\n  }\n\n  return validator;\n}; //Checks if the form is valid\n\nexport const isFormValid = validationObject => {\n  for (let key in validationObject) {\n    if (validationObject[key] !== true) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/formValidation.js"],"names":["isFieldValid","name","value","validator","isFormValid","validationObject","key"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAe;AACvC,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAGD,KAAK,KAAG,EAAX,EAAe,OAAO,uBAAP;;AAEf,UAAOD,IAAP;AACI,SAAK,MAAL;AACI,UAAGC,KAAK,KAAG,SAAX,EAAsBC,SAAS,GAAG,sBAAZ;AACtB;;AAEJ,SAAK,QAAL;AACI,UAAGD,KAAK,GAAG,KAAX,EAAkBC,SAAS,GAAG,kCAAZ,CAAlB,KACK,IAAGD,KAAK,GAAC,IAAN,KAAa,CAAhB,EAAmBC,SAAS,GAAG,4BAAZ;AACxB;AARR;;AAUI,SAAOA,SAAP;AACH,CAfE,C,CAgBP;;AACA,OAAO,MAAMC,WAAW,GAAIC,gBAAD,IAAoB;AAC/C,OAAK,IAAIC,GAAT,IAAgBD,gBAAhB,EAAiC;AAC7B,QAAGA,gBAAgB,CAACC,GAAD,CAAhB,KAAwB,IAA3B,EAAgC;AAC5B,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACC,CAPM","sourcesContent":["//Checks if a field is valid, if not returns the error message\nexport const isFieldValid = (name, value)=>{\n    let validator = true;\n    if(value===\"\") return \"Please insert a value\";\n\n    switch(name) {\n        case \"type\":\n            if(value===\"DEFAULT\") validator = \"Please choose a type\"\n            break;\n\n        case \"amount\":\n            if(value < 15000) validator = \"Insert value greater than £15000\"\n            else if(value%1000!==0) validator = \"Must be a multiple of 1000\"    \n            break;\n        }\n        return validator;\n    }\n//Checks if the form is valid\nexport const isFormValid = (validationObject)=>{\nfor (let key in validationObject){\n    if(validationObject[key]!==true){\n        return false;\n    }\n}\nreturn true;\n}\n"]},"metadata":{},"sourceType":"module"}
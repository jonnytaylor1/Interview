{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantaylor/Google Drive/Individual Practice Sections/ToDoList/Frontend/src/containers/listPage.js\";\nimport React, { useState, useEffect, Component } from 'react';\nimport Todo from '../components/todo';\nimport styled from 'styled-components';\nconst URL = 'ws://localhost:5000';\nconst StyledUl = styled.ul`\ndisplay: flex;\nflex-direction: column;\npadding: 0;\nmargin: 0;\nwidth: 100%;\n`;\nconst StyledDiv = styled.div`\ndisplay:flex;\nflex-direction: column;\nalign-items: center;\nmargin: 0 auto;\nmargin-top: 1rem;\nborder: 1px solid black;\nwidth: 20rem;\nbackground: white;\n`;\nconst StyledForm = styled.form`\ndisplay: flex;\nmargin-bottom: 1rem;\nmargin-top: 1rem;\nbackground: blue;\n`;\n\nclass ListPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      input: '',\n      listItems: [\"hi\", \"you\", \"are\"]\n    };\n    this.ws = new WebSocket(URL);\n\n    this.saveListItem = e => {\n      e.preventDefault();\n\n      if (input !== \"\") {\n        // ws.send(input);\n        setListItems([...listItems, input]);\n        setInput(\"\");\n      }\n    };\n\n    this.removeListItem = index => {\n      const updatedListItems = [...listItems];\n      updatedListItems.splice(index, 1);\n      setListItems(updatedListItems);\n    };\n  }\n\n  componentDidMount() {\n    this.ws.onopen = evt => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected');\n      let data = JSON.stringify({\n        userId: userId\n      });\n      this.ws.send(data);\n    };\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      const message = JSON.parse(evt.data);\n      this.addMessage(message);\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n\n      this.setState({\n        ws: new WebSocket(URL)\n      });\n    };\n  }\n\n  render() {\n    let todoList = this.state.listItems.map((item, index) => /*#__PURE__*/React.createElement(Todo, {\n      key: index,\n      onclick: () => removeListItem(index),\n      todo: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 60\n      }\n    }));\n    return /*#__PURE__*/React.createElement(StyledDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(StyledForm, {\n      onSubmit: e => saveListItem(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Add Todo\")), todoList.length !== 0 ? /*#__PURE__*/React.createElement(StyledUl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 32\n      }\n    }, todoList) : null);\n  }\n\n}\n\n;\nexport default ListPage;","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Individual Practice Sections/ToDoList/Frontend/src/containers/listPage.js"],"names":["React","useState","useEffect","Component","Todo","styled","URL","StyledUl","ul","StyledDiv","div","StyledForm","form","ListPage","state","input","listItems","ws","WebSocket","saveListItem","e","preventDefault","setListItems","setInput","removeListItem","index","updatedListItems","splice","componentDidMount","onopen","evt","console","log","data","JSON","stringify","userId","send","onmessage","message","parse","addMessage","onclose","setState","render","todoList","map","item","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\nimport Todo from '../components/todo';\nimport styled from 'styled-components';\nconst URL = 'ws://localhost:5000';\n\n\nconst StyledUl = styled.ul`\ndisplay: flex;\nflex-direction: column;\npadding: 0;\nmargin: 0;\nwidth: 100%;\n`\n\nconst StyledDiv = styled.div`\ndisplay:flex;\nflex-direction: column;\nalign-items: center;\nmargin: 0 auto;\nmargin-top: 1rem;\nborder: 1px solid black;\nwidth: 20rem;\nbackground: white;\n`\n\nconst StyledForm = styled.form`\ndisplay: flex;\nmargin-bottom: 1rem;\nmargin-top: 1rem;\nbackground: blue;\n`\n\nclass ListPage extends Component {\n\n    state = {\n        input: '',\n        listItems: [\"hi\", \"you\", \"are\"]\n    }\n\n    ws = new WebSocket(URL);\n\n    componentDidMount() {\n        this.ws.onopen = (evt) => {\n            // on connecting, do nothing but log it to the console\n            console.log('connected');\n            let data = JSON.stringify({userId: userId});\n            this.ws.send(data);\n          }\n      \n          this.ws.onmessage = evt => {\n            // on receiving a message, add it to the list of messages\n            const message = JSON.parse(evt.data)\n            this.addMessage(message)\n          }\n      \n          this.ws.onclose = () => {\n            console.log('disconnected')\n            // automatically try to reconnect on connection loss\n            this.setState({\n              ws: new WebSocket(URL),\n            })\n          }\n        }\n\n\n\n\n    saveListItem = (e)=>{\n        e.preventDefault();\n        if(input!==\"\"){\n            // ws.send(input);\n            setListItems([...listItems, input]);\n            setInput(\"\");\n        }\n    }\n\n    removeListItem = (index)=>{\n        const updatedListItems = [...listItems];\n        updatedListItems.splice(index, 1);\n        setListItems(updatedListItems);\n    }\n\n    render(){\n    \n    let todoList = this.state.listItems.map((item, index)=><Todo key={index} onclick={()=>removeListItem(index)} todo={item}/>)\n\n    return(\n        <StyledDiv>\n        <StyledForm onSubmit={(e)=>saveListItem(e)}>\n            <input value={input} onChange={(e)=>setInput(e.target.value)}/>\n            <button>Add Todo</button>\n        </StyledForm>\n        {todoList.length!==0 ? <StyledUl>{todoList}</StyledUl>: null}\n      \n        </StyledDiv>\n    )}\n}; \n\nexport default ListPage;"]},"metadata":{},"sourceType":"module"}
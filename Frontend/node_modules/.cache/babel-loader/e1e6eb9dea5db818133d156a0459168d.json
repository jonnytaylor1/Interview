{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantaylor/Google Drive/Interview/ToDoList copy/Frontend/src/components/calculations.js\";\nimport React from 'react';\n\nconst Calculations = () => {\n  const businessInfo = [{\n    id: 1,\n    name: \"FaceNovel\",\n    amount: 30000,\n    type: \"Recruit New Staff\"\n  }, {\n    id: 2,\n    name: \"WeVlog\",\n    amount: 30000000,\n    type: \"But other business\"\n  }, {\n    id: 3,\n    name: \"LibroPedia\",\n    amount: 75000,\n    type: \"Borrow in anticipation of a revenue source\"\n  }, {\n    id: 4,\n    name: \"Coin Byte\",\n    amount: 250000,\n    type: \"Recruit New Staff\"\n  }];\n\n  const average = type => {\n    let number = 0;\n    let total = 0;\n\n    for (let i = 0; i < businessInfo.length; i++) {\n      console.log(businessInfo[i].type);\n\n      if (businessInfo[i].type === type) {\n        total += businessInfo[i].amount;\n        number += 1;\n      }\n    }\n\n    let averageLoan = total / number;\n    return averageLoan;\n  };\n\n  let loanTypeTotal = type => {\n    let occurs = 0;\n\n    for (let i = 0; i < businessInfo.length; i++) {\n      if (businessInfo[i].type === type) {\n        occurs += 1;\n      }\n    }\n\n    return occurs;\n  };\n\n  let specificLoanBands = (amount, minAmount, maxAmount) => {\n    let counter = 0;\n\n    if (amount <= maxAmount && amount >= minAmount) {\n      counter += 1;\n    }\n\n    return counter;\n  };\n\n  let averageType = average(\"Recruit New Staff\");\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 3\n    }\n  }, \"Average: \", averageType);\n};\n\nexport default Calculations;","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview/ToDoList copy/Frontend/src/components/calculations.js"],"names":["React","Calculations","businessInfo","id","name","amount","type","average","number","total","i","length","console","log","averageLoan","loanTypeTotal","occurs","specificLoanBands","minAmount","maxAmount","counter","averageType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAEvB,QAAMC,YAAY,GAAG,CACjB;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE,WAAd;AAA2BC,IAAAA,MAAM,EAAE,KAAnC;AAA0CC,IAAAA,IAAI,EAAE;AAAhD,GADiB,EAEjB;AAACH,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE,QAAd;AAAwBC,IAAAA,MAAM,EAAE,QAAhC;AAA0CC,IAAAA,IAAI,EAAE;AAAhD,GAFiB,EAGjB;AAACH,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE,YAAd;AAA4BC,IAAAA,MAAM,EAAE,KAApC;AAA2CC,IAAAA,IAAI,EAAE;AAAjD,GAHiB,EAIjB;AAACH,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE,WAAd;AAA2BC,IAAAA,MAAM,EAAE,MAAnC;AAA2CC,IAAAA,IAAI,EAAE;AAAjD,GAJiB,CAArB;;AAQJ,QAAMC,OAAO,GAAGD,IAAD,IAAQ;AACnB,QAAIE,MAAM,GAAE,CAAZ;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACR,YAAY,CAACS,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpCE,MAAAA,OAAO,CAACC,GAAR,CAAYX,YAAY,CAACQ,CAAD,CAAZ,CAAgBJ,IAA5B;;AACA,UAAGJ,YAAY,CAACQ,CAAD,CAAZ,CAAgBJ,IAAhB,KAAyBA,IAA5B,EAAiC;AAC7BG,QAAAA,KAAK,IAAIP,YAAY,CAACQ,CAAD,CAAZ,CAAgBL,MAAzB;AACAG,QAAAA,MAAM,IAAI,CAAV;AACH;AACJ;;AACD,QAAIM,WAAW,GAAGL,KAAK,GAACD,MAAxB;AAEA,WAAOM,WAAP;AACH,GAbD;;AAeA,MAAIC,aAAa,GAAIT,IAAD,IAAQ;AACxB,QAAIU,MAAM,GAAG,CAAb;;AACA,SAAI,IAAIN,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACR,YAAY,CAACS,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,UAAGR,YAAY,CAACQ,CAAD,CAAZ,CAAgBJ,IAAhB,KAAyBA,IAA5B,EAAiC;AAC7BU,QAAAA,MAAM,IAAE,CAAR;AACH;AACJ;;AACD,WAAOA,MAAP;AACH,GARD;;AAUA,MAAIC,iBAAiB,GAAG,CAACZ,MAAD,EAASa,SAAT,EAAoBC,SAApB,KAAgC;AACpD,QAAIC,OAAO,GAAG,CAAd;;AACA,QAAGf,MAAM,IAAEc,SAAR,IAAqBd,MAAM,IAAGa,SAAjC,EAA2C;AACvCE,MAAAA,OAAO,IAAE,CAAT;AACH;;AACD,WAAOA,OAAP;AACH,GAND;;AAQA,MAAIC,WAAW,GAAGd,OAAO,CAAC,mBAAD,CAAzB;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAac,WAAb,CADF;AAGC,CAhDD;;AAkDA,eAAepB,YAAf","sourcesContent":["import React from 'react';\n\nconst Calculations = () => {\n\n    const businessInfo = [\n        {id: 1, name: \"FaceNovel\", amount: 30000, type: \"Recruit New Staff\"},\n        {id: 2, name: \"WeVlog\", amount: 30000000, type: \"But other business\"},\n        {id: 3, name: \"LibroPedia\", amount: 75000, type: \"Borrow in anticipation of a revenue source\"},\n        {id: 4, name: \"Coin Byte\", amount: 250000, type: \"Recruit New Staff\"}\n]\n\n\nconst average= (type)=>{\n    let number =0;\n    let total = 0; \n    for(let i=0; i<businessInfo.length; i++){\n        console.log(businessInfo[i].type);\n        if(businessInfo[i].type === type){\n            total += businessInfo[i].amount;\n            number += 1;\n        }\n    }\n    let averageLoan = total/number;\n\n    return averageLoan;\n}\n\nlet loanTypeTotal = (type)=>{\n    let occurs = 0;\n    for(let i=0; i<businessInfo.length; i++){\n        if(businessInfo[i].type === type){\n            occurs+=1;\n        }\n    }\n    return occurs;\n}\n\nlet specificLoanBands = (amount, minAmount, maxAmount)=>{\n    let counter = 0;\n    if(amount<=maxAmount && amount>= minAmount){\n        counter+=1;\n    }\n    return counter;\n}\n\nlet averageType = average(\"Recruit New Staff\");\n\nreturn(\n  <p>Average: {averageType}</p>  \n)\n}; \n\nexport default Calculations;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport InputAndError from '../components/inputAndError';\nimport SelectAndError from '../components/selectAndError';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { frequencyAndTotal, loanBandCounter } from '../calculationFunctions';\nimport Chart from \"react-apexcharts\";\nimport { loanTypes, initialChartConfig, bandCounter, bandGroups } from '../config';\nimport { isFormValid, isFieldValid } from '../formValidation';\nconst StyledUl = styled.ul`\ndisplay: flex;\nwidth: 100%;\nflex-direction: column;\noverflow-y: scroll;\n`;\nconst StyledChart = styled(Chart)`\nborder: solid black 1px;\npadding: 1rem;\n`;\nexport const StyledButton = styled.button`\nbackground: ${props => {\n  if (props.active === \"isactive\") return \"blue\";else return props.background;\n}};\n:disabled {\n    background: grey;\n    cursor: not-allowed;\n}\n`;\nconst ChartButton = styled(StyledButton)`\nwidth: calc(100%/3);\n`;\nconst StyledForm = styled.form`\ndisplay: flex;\nflex-direction: column;\nalign-self: flex-end;\nborder: 1px solid black;\npadding: 1rem;\n`;\nconst StyledInnerDiv = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 600px;\n`;\nconst StyledOuterDiv = styled.div`\ndisplay: flex;\nmargin: 5rem 5rem 0 5rem;\ngap: 5rem;\nmax-height: calc(100vh - 7rem);\n`;\nconst StyledChartDiv = styled.div`\nalign-self: flex-end;\n`;\n\nclass LoansAndData extends Component {\n  componentDidMount() {\n    this.getCompanies();\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.getCompanies = () => {\n      axios.get('http://localhost:5000/loans').then(response => {\n        //Creates the averages and total of each loan type data\n        let frequencyAndTotalData = frequencyAndTotal(loanTypes, response.data.companies);\n        let dataTypes = Object.keys(frequencyAndTotalData);\n        let frequencyAndTotals = Object.values(frequencyAndTotalData);\n        let averages = frequencyAndTotals.map(data => data.frequency !== 0 ? Math.round(data.totalAmount / data.frequency).toString() : 0);\n        let typeFrequencies = frequencyAndTotals.map(data => data.frequency); //Creates the loan band data\n\n        let bandCounterObject = loanBandCounter(response.data.companies, bandCounter);\n        let bandFrequencies = Object.values(bandCounterObject); //Updates the company state\n\n        this.setState({ ...this.state,\n          companies: response.data.companies.reverse(),\n          calculationsData: {\n            averages: averages,\n            frequencies: typeFrequencies,\n            bandFrequencies: bandFrequencies\n          }\n        }); //Updates the graph data\n\n        let graphName = this.state.chartConfig.series[0].name;\n        if (graphName === \"Averages\" || graphName === \"\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Averages\",\n              data: averages\n            }]\n          }\n        });else if (graphName === \"Frequency (Type)\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Frequency (Type)\",\n              data: typeFrequencies\n            }]\n          }\n        });else if (graphName === \"Frequency (Band)\") this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: bandGroups\n              }\n            },\n            series: [{\n              name: \"Frequency (Band)\",\n              data: bandFrequencies\n            }]\n          }\n        });\n      });\n    };\n\n    this.addLoan = async e => {\n      e.preventDefault();\n      await axios.post('http://localhost:5000/loans', this.state.loanData);\n      this.setState({ ...this.state,\n        loanData: this.initialFormData\n      });\n      this.getCompanies();\n    };\n\n    this.dropDownChangeHandler = e => {\n      let {\n        value\n      } = e.target;\n\n      if (value === \"Other\") {\n        this.setState({ ...this.state,\n          loanData: { ...this.state.loanData,\n            type: value\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: false\n          }\n        });\n      } else {\n        this.setState({ ...this.state,\n          loanData: { ...this.state.loanData,\n            type: value,\n            otherType: \"\"\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: true\n          }\n        });\n      }\n    };\n\n    this.onChangeHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      this.setState({ ...this.state,\n        loanData: { ...this.state.loanData,\n          [name]: value\n        }\n      });\n    };\n\n    this.deleteCompany = async (e, companyId) => {\n      e.stopPropagation();\n      await axios.delete('http://localhost:5000/loans/' + companyId); //If more time I would use this to update the array instead of calling from the database\n      // let updatedCompanies = [...this.state.companies].filter(company=>company._id!==companyId);\n      // this.setState({...this.state, companies: updatedCompanies});\n\n      this.getCompanies();\n    };\n\n    this.onBlurHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      let validator = isFieldValid(name, value);\n      this.setState({ ...this.state,\n        inputClicked: { ...this.state.inputClicked,\n          [name]: true\n        },\n        inputValidated: { ...this.state.inputValidated,\n          [name]: validator\n        }\n      });\n    };\n\n    this.changeGraph = e => {\n      let name;\n      let data;\n      let categories;\n      let activeGraph;\n\n      switch (e.target.name) {\n        case \"average\":\n          name = \"Averages\";\n          data = this.state.calculationsData.averages;\n          categories = loanTypes;\n          activeGraph = \"Average\";\n          break;\n\n        case \"frequencyType\":\n          name = \"Frequency (Type)\";\n          data = this.state.calculationsData.frequencies;\n          categories = loanTypes;\n          activeGraph = \"Frequency (Type)\";\n          break;\n\n        case \"frequencyBands\":\n          name = \"Frequency (Band)\";\n          data = this.state.calculationsData.bandFrequencies;\n          categories = bandGroups;\n          activeGraph = \"Frequency (Band)\";\n          break;\n\n        default:\n          console.log(\"error\");\n      }\n\n      this.setState({ ...this.state,\n        chartConfig: { ...this.state.chartConfig,\n          options: { ...this.state.chartConfig.options,\n            xaxis: { ...this.state.chartConfig.options.xaxis,\n              categories: categories\n            }\n          },\n          series: [{\n            name: name,\n            data: data\n          }]\n        },\n        activeGraph: activeGraph\n      });\n    };\n\n    this.showLoanDetails = (e, companyId) => {\n      let clickedCompany = this.state.companies.find(company => company._id === companyId);\n      this.setCompanyLoanDetails(clickedCompany);\n      this.props.history.push('/details');\n    };\n\n    this.initialFormData = {\n      name: \"\",\n      amount: \"\",\n      type: \"DEFAULT\",\n      otherType: \"\"\n    };\n    this.state = {\n      chartConfig: initialChartConfig,\n      companies: [],\n      loanData: this.initialFormData,\n      inputValidated: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: true\n      },\n      inputClicked: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: false\n      },\n      calculationsData: {},\n      activeGraph: \"Average\"\n    };\n  }\n\n  render() {\n    const {\n      companyLoanDetails,\n      setCompanyLoanDetails\n    } = this.context;\n    let companiesUI;\n\n    if (this.state.companies.length !== 0) {\n      companiesUI = this.state.companies.map(company => {\n        return /*#__PURE__*/React.createElement(Company, {\n          showLoanDetails: e => this.showLoanDetails(e, company._id),\n          key: company._id,\n          name: company.name,\n          deleteCompany: e => this.deleteCompany(e, company._id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 20\n          }\n        }, company.loans.map(loan => /*#__PURE__*/React.createElement(LoanRequest, {\n          amount: loan.amount,\n          type: loan.type,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 45\n          }\n        })));\n      });\n    }\n\n    const optionElements = [/*#__PURE__*/React.createElement(\"option\", {\n      key: \"-1\",\n      value: \"DEFAULT\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 29\n      }\n    }, \"Loan Type\"), loanTypes.map((loanType, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: loanType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 124\n      }\n    }, loanType))];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledOuterDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(StyledInnerDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    }, \"Businesses\"), this.state.companies.length !== 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }, \"Click Business to Show Further Details\"), /*#__PURE__*/React.createElement(StyledUl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }\n    }, companiesUI)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 16\n      }\n    }, \"Currently no businesses\")), /*#__PURE__*/React.createElement(StyledChartDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ChartButton, {\n      active: this.state.activeGraph === \"Average\" ? \"isactive\" : \" \",\n      name: \"average\",\n      onClick: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, \"Average of Each Loan Type\"), /*#__PURE__*/React.createElement(ChartButton, {\n      active: this.state.activeGraph === \"Frequency (Type)\" ? \"isactive\" : \" \",\n      name: \"frequencyType\",\n      onClick: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }\n    }, \"Frequency of Each Loan Type\"), /*#__PURE__*/React.createElement(ChartButton, {\n      active: this.state.activeGraph === \"Frequency (Band)\" ? \"isactive\" : \" \",\n      name: \"frequencyBands\",\n      onClick: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }\n    }, \"Frequency of Loans in Each Band\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(StyledChart, {\n      options: this.state.chartConfig.options,\n      series: this.state.chartConfig.series,\n      type: \"bar\",\n      height: \"515px\",\n      width: \"775px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(StyledForm, {\n      onSubmit: e => this.addLoan(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"nameInput\",\n      label: \"Name\",\n      name: \"name\",\n      value: this.state.loanData.name,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.name,\n      inputClicked: this.state.inputClicked.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"amountInput\",\n      label: \"Amount(\\xA3)\",\n      name: \"amount\",\n      value: this.state.loanData.amount,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.amount,\n      inputClicked: this.state.inputClicked.amount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SelectAndError, {\n      id: \"loanType\",\n      label: \"Type\",\n      onBlur: e => this.onBlurHandler(e),\n      required: true,\n      name: \"type\",\n      value: this.state.loanData.type,\n      onChange: e => this.dropDownChangeHandler(e),\n      errorMessage: this.state.inputValidated.type,\n      inputClicked: this.state.inputClicked.type,\n      inputValidated: this.state.inputValidated.type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }, optionElements), this.state.loanData.type === \"Other\" ? /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"otherType\",\n      label: \"Other Type\",\n      name: \"otherType\",\n      value: this.state.loanData.otherType,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.otherType,\n      inputClicked: this.state.inputClicked.otherType,\n      inputValidated: this.state.inputValidated.otherType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }) : null, /*#__PURE__*/React.createElement(StyledButton, {\n      background: \"green\",\n      disabled: !isFormValid(this.state.inputValidated),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, \"Add Loan Request\"))));\n  }\n\n}\n\nLoansAndData.contextType = companyLoanContext;\nexport default LoansAndData;","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js"],"names":["React","Component","axios","loanTypeContext","companyLoanContext","Company","InputAndError","SelectAndError","LoanRequest","styled","frequencyAndTotal","loanBandCounter","Chart","loanTypes","initialChartConfig","bandCounter","bandGroups","isFormValid","isFieldValid","StyledUl","ul","StyledChart","StyledButton","button","props","active","background","ChartButton","StyledForm","form","StyledInnerDiv","div","StyledOuterDiv","StyledChartDiv","LoansAndData","componentDidMount","getCompanies","constructor","get","then","response","frequencyAndTotalData","data","companies","dataTypes","Object","keys","frequencyAndTotals","values","averages","map","frequency","Math","round","totalAmount","toString","typeFrequencies","bandCounterObject","bandFrequencies","setState","state","reverse","calculationsData","frequencies","graphName","chartConfig","series","name","options","xaxis","categories","addLoan","e","preventDefault","post","loanData","initialFormData","dropDownChangeHandler","value","target","type","inputValidated","otherType","onChangeHandler","deleteCompany","companyId","stopPropagation","delete","onBlurHandler","validator","inputClicked","changeGraph","activeGraph","console","log","showLoanDetails","clickedCompany","find","company","_id","setCompanyLoanDetails","history","push","amount","render","companyLoanDetails","context","companiesUI","length","loans","loan","optionElements","loanType","index","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport InputAndError from '../components/inputAndError';\nimport SelectAndError from '../components/selectAndError';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { frequencyAndTotal, loanBandCounter } from '../calculationFunctions';\nimport Chart from \"react-apexcharts\";\nimport { loanTypes, initialChartConfig, bandCounter, bandGroups } from '../config';\nimport { isFormValid, isFieldValid } from '../formValidation';\n\nconst StyledUl = styled.ul`\ndisplay: flex;\nwidth: 100%;\nflex-direction: column;\noverflow-y: scroll;\n`\n\nconst StyledChart = styled(Chart)`\nborder: solid black 1px;\npadding: 1rem;\n`\n\nexport const StyledButton = styled.button`\nbackground: ${props=>{\n    if(props.active===\"isactive\") return \"blue\";\n    else return props.background\n}};\n:disabled {\n    background: grey;\n    cursor: not-allowed;\n}\n`\n\nconst ChartButton = styled(StyledButton)`\nwidth: calc(100%/3);\n`\n \n\nconst StyledForm = styled.form`\ndisplay: flex;\nflex-direction: column;\nalign-self: flex-end;\nborder: 1px solid black;\npadding: 1rem;\n`\n\nconst StyledInnerDiv = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 600px;\n`\n\nconst StyledOuterDiv = styled.div`\ndisplay: flex;\nmargin: 5rem 5rem 0 5rem;\ngap: 5rem;\nmax-height: calc(100vh - 7rem);\n`\n\nconst StyledChartDiv = styled.div`\nalign-self: flex-end;\n`\n\n\nclass LoansAndData extends Component {\n    static contextType = companyLoanContext\n\n    componentDidMount (){this.getCompanies();}\n\n    constructor(props) {\n        super(props);\n        \n        this.initialFormData = {name: \"\", amount: \"\", type: \"DEFAULT\", otherType: \"\"};\n\n        this.state = {\n            chartConfig: initialChartConfig,\n            companies: [],\n            loanData: this.initialFormData,\n            inputValidated: {name: false, amount: false, type: false, otherType: true},\n            inputClicked: {name: false, amount: false, type: false, otherType: false},\n            calculationsData: {},\n            activeGraph: \"Average\" }}\n\n\n    getCompanies = ()=>{\n        axios.get('http://localhost:5000/loans')\n        .then(response => {\n            //Creates the averages and total of each loan type data\n            let frequencyAndTotalData = frequencyAndTotal(loanTypes, response.data.companies);\n            let dataTypes = Object.keys(frequencyAndTotalData);\n            let frequencyAndTotals = Object.values(frequencyAndTotalData);\n            let averages = frequencyAndTotals.map(data=> data.frequency !== 0 ? Math.round(data.totalAmount/data.frequency).toString() : 0);\n            let typeFrequencies = frequencyAndTotals.map(data=>data.frequency);\n            //Creates the loan band data\n            let bandCounterObject = loanBandCounter(response.data.companies, bandCounter);\n            let bandFrequencies = Object.values(bandCounterObject);\n            //Updates the company state\n            this.setState({...this.state, \n                companies: response.data.companies.reverse(),\n                calculationsData: {averages: averages, frequencies: typeFrequencies, bandFrequencies: bandFrequencies}\n            })\n            //Updates the graph data\n            let graphName = this.state.chartConfig.series[0].name;\n            if(graphName===\"Averages\"||graphName===\"\") this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Averages\", data: averages}]}});\n            else if (graphName===\"Frequency (Type)\")  this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Frequency (Type)\", data: typeFrequencies}]}});\n            else if (graphName===\"Frequency (Band)\") this.setState({...this.state, chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: bandGroups}}, series: [{name:\"Frequency (Band)\", data: bandFrequencies}]}});\n})\n    }\n   \n    \n    addLoan = async (e)=>{\n        e.preventDefault();\n        await axios.post('http://localhost:5000/loans', this.state.loanData);\n        this.setState({...this.state, loanData: this.initialFormData});\n        this.getCompanies();        \n    }\n\n    dropDownChangeHandler = (e)=>{\n        let {value} = e.target;\n        if(value===\"Other\"){\n            this.setState({...this.state, \n                loanData: {...this.state.loanData, type: value},\n                inputValidated: {...this.state.inputValidated, otherType: false}});\n        }\n        else{\n            this.setState({...this.state, \n                loanData: {...this.state.loanData, type: value, otherType: \"\"},\n                inputValidated: {...this.state.inputValidated, otherType: true}});\n        }\n    }\n\n    onChangeHandler = (e)=>{\n        let {name, value} = e.target;\n        this.setState({...this.state, loanData: {...this.state.loanData, [name]: value}});\n    }\n\n\n    deleteCompany = async (e, companyId)=>{\n        e.stopPropagation();\n        await axios.delete('http://localhost:5000/loans/' + companyId);\n        //If more time I would use this to update the array instead of calling from the database\n        // let updatedCompanies = [...this.state.companies].filter(company=>company._id!==companyId);\n        // this.setState({...this.state, companies: updatedCompanies});\n        this.getCompanies();\n    }\n\n  \n    onBlurHandler = (e)=>{\n        let {name, value} = e.target;\n        let validator = isFieldValid(name, value);\n\n        this.setState({...this.state, \n            inputClicked: {...this.state.inputClicked, [name]: true},\n            inputValidated: {...this.state.inputValidated, [name]: validator}\n        })\n    }\n    \n    changeGraph=(e)=>{\n        let name;\n        let data;\n        let categories;\n        let activeGraph;\n        switch (e.target.name){\n            case \"average\":\n                name = \"Averages\";\n                data = this.state.calculationsData.averages;\n                categories = loanTypes;\n                activeGraph = \"Average\"\n                break;\n            case \"frequencyType\":\n                name = \"Frequency (Type)\";\n                data = this.state.calculationsData.frequencies;\n                categories = loanTypes;\n                activeGraph = \"Frequency (Type)\"\n                break;\n            \n            case \"frequencyBands\":\n                name = \"Frequency (Band)\";\n                data = this.state.calculationsData.bandFrequencies;\n                categories = bandGroups;\n                activeGraph = \"Frequency (Band)\"\n                break;\n            default:\n                console.log(\"error\");     \n    }\n\n    this.setState({...this.state, \n        chartConfig: {...this.state.chartConfig, options:{...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: categories}}, series: [{name: name, data: data}]},\n        activeGraph: activeGraph\n});\n}\n\n    showLoanDetails = (e, companyId)=>{\n        let clickedCompany = this.state.companies.find(company=> company._id===companyId);\n        this.setCompanyLoanDetails(clickedCompany);\n        this.props.history.push('/details');\n    \n}\n\n    render(){\n\n        const { companyLoanDetails, setCompanyLoanDetails } = this.context\n        let companiesUI;\n    if(this.state.companies.length!==0){\n        companiesUI = this.state.companies.map(company=>{\n            return <Company showLoanDetails={(e)=>this.showLoanDetails(e, company._id)} key={company._id} name = {company.name} deleteCompany={(e)=>this.deleteCompany(e, company._id)}>\n                {company.loans.map((loan)=> <LoanRequest amount={loan.amount} type={loan.type}/>)}\n            </Company>\n        })\n    }\n    const optionElements = [<option key=\"-1\" value=\"DEFAULT\" disabled>Loan Type</option>, loanTypes.map((loanType, index)=><option key={index} value={loanType}>{loanType}</option>)];\n\n  \n\n    return(\n        <>\n        <StyledOuterDiv>\n        <StyledInnerDiv>\n            <h1>Businesses</h1>\n            {this.state.companies.length!==0 ?\n            <> \n            <p>Click Business to Show Further Details</p>\n            <StyledUl>{companiesUI}</StyledUl>\n            </>\n             : <p>Currently no businesses</p>}\n        </StyledInnerDiv>\n            <StyledChartDiv>\n                <div>\n                    <ChartButton active={this.state.activeGraph === \"Average\" ? \"isactive\" : \" \"} name=\"average\" onClick={(e)=>this.changeGraph(e)}>Average of Each Loan Type</ChartButton>  \n                    <ChartButton active={this.state.activeGraph === \"Frequency (Type)\" ? \"isactive\" : \" \"} name=\"frequencyType\" onClick={(e)=>this.changeGraph(e)}>Frequency of Each Loan Type</ChartButton>\n                    <ChartButton active={this.state.activeGraph === \"Frequency (Band)\" ? \"isactive\" : \" \"} name=\"frequencyBands\" onClick={(e)=>this.changeGraph(e)}>Frequency of Loans in Each Band</ChartButton>\n                </div>\n                <div>\n              <StyledChart\n                options={this.state.chartConfig.options}\n                series={this.state.chartConfig.series}\n                type=\"bar\"\n                height=\"515px\"\n                width= \"775px\"\n              />\n              </div>\n            </StyledChartDiv>\n            <StyledForm onSubmit={(e)=>this.addLoan(e)} >\n            <InputAndError id=\"nameInput\" label=\"Name\" name=\"name\" value={this.state.loanData.name} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.name} inputClicked={this.state.inputClicked.name}/>\n            <InputAndError id=\"amountInput\" label=\"Amount(£)\" name=\"amount\" value={this.state.loanData.amount} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.amount} inputClicked={this.state.inputClicked.amount}/>\n            <SelectAndError id=\"loanType\" label=\"Type\" onBlur={(e)=>this.onBlurHandler(e)} required name=\"type\" value={this.state.loanData.type} onChange={(e)=>this.dropDownChangeHandler(e)} errorMessage={this.state.inputValidated.type} inputClicked={this.state.inputClicked.type} inputValidated={this.state.inputValidated.type}>\n                {optionElements}\n            </SelectAndError>\n            {this.state.loanData.type===\"Other\" ? \n            <InputAndError id=\"otherType\" label=\"Other Type\" name=\"otherType\" value={this.state.loanData.otherType} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.otherType} inputClicked={this.state.inputClicked.otherType} inputValidated={this.state.inputValidated.otherType}/>\n            : null}\n            <StyledButton background=\"green\" disabled={!isFormValid(this.state.inputValidated)}>Add Loan Request</StyledButton>\n        </StyledForm>\n            </StyledOuterDiv>\n        </>\n    )\n}; \n}\n\nexport default LoansAndData;"]},"metadata":{},"sourceType":"module"}
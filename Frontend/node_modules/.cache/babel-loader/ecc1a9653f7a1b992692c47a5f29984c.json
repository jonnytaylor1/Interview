{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js\";\nimport React, { useState, useContext, Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport InputAndError from '../components/inputAndError';\nimport SelectAndError from '../components/selectAndError';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { average, tags, loanAmounts, bandCounter2, loanBandCounter, frequencyAndTotal } from '../calculationFunctions';\nimport Chart from \"react-apexcharts\";\nimport { loanTypes, initialChartConfig } from '../config';\nconst StyledUl = styled.ul`\ndisplay: flex;\nflex-direction: column;\nwidth: 400px;\nmargin-top: 5rem;\n`;\nconst StyledChart = styled(Chart)`\nborder: black solid 1px;\nmargin: 4rem;\nwidth: 700px;\n`;\n\nclass LoansAndData extends Component {\n  componentDidMount() {\n    this.getCompanies(); //     axios.get('http://localhost:5000/loans')\n    //     .then(response => {\n    //         let response2 = frequencyAndTotal(loanTypes, response.data.companies);\n    //         let dataTypes = Object.keys(response2);\n    //         let frequencyAndTotals = Object.values(response2)\n    //         let averages = frequencyAndTotals.map(data=> data.frequency !== 0 ? data.totalAmount/data.frequency : 0);\n    //         let typeFrequencies = frequencyAndTotals.map(data=>data.frequency);\n    //         this.setState({...this.state, \n    //         chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Averages\", data: averages}]},\n    //         companies: response.data.companies,\n    //         calculationsData: {averages: averages, frequencies: typeFrequencies}\n    //     });\n    // })\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.getCompanies = () => {\n      axios.get('http://localhost:5000/loans').then(response => {\n        let response2 = frequencyAndTotal(loanTypes, response.data.companies);\n        let dataTypes = Object.keys(response2);\n        let frequencyAndTotals = Object.values(response2);\n        let averages = frequencyAndTotals.map(data => data.frequency !== 0 ? data.totalAmount / data.frequency : 0);\n        let typeFrequencies = frequencyAndTotals.map(data => data.frequency);\n        this.setState({ ...this.state,\n          chartConfig: { ...this.state.chartConfig,\n            options: { ...this.state.chartConfig.options,\n              xaxis: { ...this.state.chartConfig.options.xaxis,\n                categories: dataTypes\n              }\n            },\n            series: [{\n              name: \"Averages\",\n              data: averages\n            }]\n          },\n          companies: response.data.companies,\n          calculationsData: {\n            averages: averages,\n            frequencies: typeFrequencies\n          }\n        });\n      });\n    };\n\n    this.addLoan = async e => {\n      e.preventDefault();\n      let data = {\n        name: this.state.loanData.name,\n        amount: this.state.loanData.amount,\n        type: this.state.loanData.type,\n        otherType: this.state.loanData.otherType\n      };\n      await axios.post('http://localhost:5000/loans', data);\n      this.setState({ ...this.state,\n        loanData: this.initialFormData\n      });\n      this.getCompanies();\n    };\n\n    this.dropDownChangeHandler = e => {\n      let {\n        value\n      } = e.target;\n      console.log(value);\n\n      if (value === \"Other\") {\n        this.setState({ ...this.state,\n          loanData: { ...this.initialFormData,\n            type: value\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: false\n          }\n        });\n      } else {\n        this.setState({ ...this.state,\n          loanData: { ...this.state.loanData,\n            type: value,\n            otherType: \"\"\n          },\n          inputValidated: { ...this.state.inputValidated,\n            otherType: true\n          }\n        });\n      }\n    };\n\n    this.onChangeHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      this.setState({ ...this.state,\n        loanData: { ...this.state.loanData,\n          [name]: value\n        }\n      });\n    };\n\n    this.deleteCompany = async companyId => {\n      await axios.delete('http://localhost:5000/loans/' + companyId);\n      let updatedCompanies = [...this.state.companies].filter(company => company._id !== companyId);\n      this.setState({ ...this.state,\n        companies: updatedCompanies\n      });\n    };\n\n    this.inputUsed = name => {\n      if (this.state.inputClicked[name] === false) {\n        this.setState({ ...this.state,\n          inputClicked: { ...this.state.inputClicked,\n            [name]: true\n          }\n        });\n      }\n    };\n\n    this.onBlurHandler = e => {\n      let {\n        name,\n        value\n      } = e.target;\n      this.inputUsed(name);\n      this.isFieldValid(name, value);\n    };\n\n    this.isFieldValid = (name, value) => {\n      let validator = true;\n\n      if (value === \"\") {\n        validator = \"Please insert a value\";\n        this.setState({ ...this.state,\n          inputValidated: { ...this.state.inputValidated,\n            [name]: validator\n          }\n        });\n        return;\n      }\n\n      switch (name) {\n        case \"type\":\n          if (value === \"DEFAULT\") {\n            validator = \"Please choose a type\";\n          }\n\n          break;\n\n        case \"amount\":\n          console.log(name);\n\n          if (value < 15000) {\n            validator = \"Please insert an amount greater than Â£15000\";\n          } else if (value % 1000 !== 0) {\n            validator = \"Please insert an amount that is a multiple of 1000\";\n          }\n\n          break;\n      }\n\n      this.setState({ ...this.state,\n        inputValidated: { ...this.state.inputValidated,\n          [name]: validator\n        }\n      });\n    };\n\n    this.formValid = () => {\n      for (let key in this.state.inputValidated) {\n        if (this.state.inputValidated[key] !== true) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.changeGraph = e => {\n      switch (e.target.name) {\n        case \"average\":\n          this.setState({ ...this.state,\n            chartConfig: { ...this.state.chartConfig,\n              series: [{\n                name: \"Averages\",\n                data: this.state.calculationsData.averages\n              }]\n            }\n          });\n          break;\n\n        case \"frequencyType\":\n          this.setState({ ...this.state,\n            chartConfig: { ...this.state.chartConfig,\n              series: [{\n                name: \"Frequencies\",\n                data: this.state.calculationsData.frequencies\n              }]\n            }\n          });\n          break;\n\n        default:\n          console.log(\"error\");\n      }\n    };\n\n    this.initialFormData = {\n      name: \"\",\n      amount: \"\",\n      type: \"DEFAULT\",\n      otherType: \"\"\n    };\n    this.state = {\n      chartConfig: initialChartConfig,\n      companies: [],\n      loanTypes: loanTypes,\n      loanData: this.initialFormData,\n      inputValidated: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: true\n      },\n      inputClicked: {\n        name: false,\n        amount: false,\n        type: false,\n        otherType: false\n      },\n      calculationsData: {}\n    };\n  }\n\n  render() {\n    const {\n      companyLoanDetails,\n      setCompanyLoanDetails\n    } = this.context;\n    let companiesUI;\n\n    if (this.state.companies !== []) {\n      companiesUI = this.state.companies.map(company => {\n        return /*#__PURE__*/React.createElement(Company, {\n          showLoanDetails: () => showLoanDetails(company._id),\n          key: company._id,\n          name: company.name,\n          deleteCompany: () => this.deleteCompany(company._id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 20\n          }\n        }, company.loans.map(loan => /*#__PURE__*/React.createElement(LoanRequest, {\n          amount: loan.amount,\n          type: loan.type,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 45\n          }\n        })));\n      });\n    }\n\n    const optionElements = [/*#__PURE__*/React.createElement(\"option\", {\n      key: \"-1\",\n      value: \"DEFAULT\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 29\n      }\n    }, \"Loan Type\"), loanTypes.map((loanType, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: loanType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 124\n      }\n    }, loanType))];\n\n    const showLoanDetails = companyId => {\n      let clickedCompany = this.state.companies.find(company => company._id === companyId);\n      setCompanyLoanDetails(clickedCompany);\n      this.props.history.push('/details');\n    };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, JSON.stringify(this.state.inputValidated), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => this.addLoan(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"nameInput\",\n      label: \"Name\",\n      name: \"name\",\n      value: this.state.loanData.name,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.name,\n      inputClicked: this.state.inputClicked.name,\n      inputValidated: this.state.inputValidated.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"amountInput\",\n      label: \"Amount\",\n      name: \"amount\",\n      value: this.state.loanData.amount,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.amount,\n      inputClicked: this.state.inputClicked.amount,\n      inputValidated: this.state.inputValidated.amount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SelectAndError, {\n      id: \"loanType\",\n      label: \"Type\",\n      onBlur: e => this.onBlurHandler(e),\n      required: true,\n      name: \"type\",\n      value: this.state.loanData.type,\n      onChange: e => this.dropDownChangeHandler(e),\n      errorMessage: this.state.inputValidated.type,\n      inputClicked: this.state.inputClicked.type,\n      inputValidated: this.state.inputValidated.type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, optionElements), this.state.loanData.type === \"Other\" ? /*#__PURE__*/React.createElement(InputAndError, {\n      id: \"otherType\",\n      label: \"Other Type\",\n      name: \"otherType\",\n      value: this.state.loanData.otherType,\n      onChange: e => this.onChangeHandler(e),\n      onBlur: e => this.onBlurHandler(e),\n      errorMessage: this.state.inputValidated.otherType,\n      inputClicked: this.state.inputClicked.otherType,\n      inputValidated: this.state.inputValidated.otherType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !this.formValid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }, \"Add Loan Request\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, \"Businesses\"), this.state.companies !== [] ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, \"Click Business to Show Further Details\"), /*#__PURE__*/React.createElement(StyledUl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }\n    }, companiesUI)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 16\n      }\n    }, \"Currently no businesses\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      name: \"average\",\n      onClick: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }\n    }, \"Average of Each Loan Type\"), /*#__PURE__*/React.createElement(\"button\", {\n      name: \"frequencyType\",\n      onClick: e => this.changeGraph(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    }, \"Frequency of Each Loan Type\"), /*#__PURE__*/React.createElement(\"button\", {\n      name: \"frequencyBands\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, \"Frequency of Loans in Each Band\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mixed-chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      options: this.state.chartConfig.options,\n      series: this.state.chartConfig.series,\n      type: \"bar\",\n      width: \"500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }))))));\n  }\n\n}\n\nLoansAndData.contextType = companyLoanContext;\nexport default LoansAndData;","map":{"version":3,"sources":["/Users/jonathantaylor/Google Drive/Interview2/Frontend/src/containers/LoansAndData.js"],"names":["React","useState","useContext","Component","axios","loanTypeContext","companyLoanContext","Company","InputAndError","SelectAndError","LoanRequest","styled","Redirect","useHistory","average","tags","loanAmounts","bandCounter2","loanBandCounter","frequencyAndTotal","Chart","loanTypes","initialChartConfig","StyledUl","ul","StyledChart","LoansAndData","componentDidMount","getCompanies","constructor","props","get","then","response","response2","data","companies","dataTypes","Object","keys","frequencyAndTotals","values","averages","map","frequency","totalAmount","typeFrequencies","setState","state","chartConfig","options","xaxis","categories","series","name","calculationsData","frequencies","addLoan","e","preventDefault","loanData","amount","type","otherType","post","initialFormData","dropDownChangeHandler","value","target","console","log","inputValidated","onChangeHandler","deleteCompany","companyId","delete","updatedCompanies","filter","company","_id","inputUsed","inputClicked","onBlurHandler","isFieldValid","validator","formValid","key","changeGraph","render","companyLoanDetails","setCompanyLoanDetails","context","companiesUI","showLoanDetails","loans","loan","optionElements","loanType","index","clickedCompany","find","history","push","JSON","stringify","contextType"],"mappings":"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","sourcesContent":["import React, {  useState, useContext, Component } from 'react';\nimport axios from 'axios';\nimport { loanTypeContext, companyLoanContext } from '../context';\nimport Company from '../components/company';\nimport InputAndError from '../components/inputAndError';\nimport SelectAndError from '../components/selectAndError';\nimport LoanRequest from '../components/loanInfo';\nimport styled from 'styled-components';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { average, tags, loanAmounts, bandCounter2, loanBandCounter, frequencyAndTotal } from '../calculationFunctions';\nimport Chart from \"react-apexcharts\";\nimport { loanTypes, initialChartConfig } from '../config';\n\n\nconst StyledUl = styled.ul`\ndisplay: flex;\nflex-direction: column;\nwidth: 400px;\nmargin-top: 5rem;\n`\n\nconst StyledChart = styled(Chart)`\nborder: black solid 1px;\nmargin: 4rem;\nwidth: 700px;\n`\n\nclass LoansAndData extends Component {\n    static contextType = companyLoanContext\n\n    componentDidMount (){\n        this.getCompanies();\n    //     axios.get('http://localhost:5000/loans')\n    //     .then(response => {\n    //         let response2 = frequencyAndTotal(loanTypes, response.data.companies);\n    //         let dataTypes = Object.keys(response2);\n    //         let frequencyAndTotals = Object.values(response2)\n    //         let averages = frequencyAndTotals.map(data=> data.frequency !== 0 ? data.totalAmount/data.frequency : 0);\n    //         let typeFrequencies = frequencyAndTotals.map(data=>data.frequency);\n    //         this.setState({...this.state, \n    //         chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Averages\", data: averages}]},\n    //         companies: response.data.companies,\n    //         calculationsData: {averages: averages, frequencies: typeFrequencies}\n    //     });\n    // })\n}\n\n    constructor(props) {\n        super(props);\n        \n        this.initialFormData = {name: \"\", amount: \"\", type: \"DEFAULT\", otherType: \"\"};\n\n        this.state = {\n            chartConfig: initialChartConfig,\n            companies: [],\n            loanTypes: loanTypes,\n            loanData: this.initialFormData,\n            inputValidated: {name: false, amount: false, type: false, otherType: true},\n            inputClicked: {name: false, amount: false, type: false, otherType: false},\n            calculationsData: {},\n\n        }\n    }\n\n\n    getCompanies = ()=>{\n        axios.get('http://localhost:5000/loans')\n        .then(response => {\n            let response2 = frequencyAndTotal(loanTypes, response.data.companies);\n            let dataTypes = Object.keys(response2);\n            let frequencyAndTotals = Object.values(response2)\n            let averages = frequencyAndTotals.map(data=> data.frequency !== 0 ? data.totalAmount/data.frequency : 0);\n            let typeFrequencies = frequencyAndTotals.map(data=>data.frequency);\n            this.setState({...this.state, \n            chartConfig: {...this.state.chartConfig, options: {...this.state.chartConfig.options, xaxis: {...this.state.chartConfig.options.xaxis, categories: dataTypes}}, series: [{name:\"Averages\", data: averages}]},\n            companies: response.data.companies,\n            calculationsData: {averages: averages, frequencies: typeFrequencies}\n    })\n})\n    }\n   \n    \n\n    addLoan = async (e)=>{\n        e.preventDefault();\n        let data = {name: this.state.loanData.name, amount: this.state.loanData.amount, type: this.state.loanData.type, otherType: this.state.loanData.otherType};\n        await axios.post('http://localhost:5000/loans', data);\n        this.setState({...this.state, loanData: this.initialFormData});\n        this.getCompanies();        \n    }\n\n    dropDownChangeHandler = (e)=>{\n        let {value} = e.target;\n        console.log(value);\n        if(value===\"Other\"){\n            this.setState({...this.state, \n                loanData: {...this.initialFormData, type: value},\n                inputValidated: {...this.state.inputValidated, otherType: false}});\n        }\n        else{\n            this.setState({...this.state, \n                loanData: {...this.state.loanData, type: value, otherType: \"\"},\n                inputValidated: {...this.state.inputValidated, otherType: true}});\n        }\n    }\n\n    onChangeHandler = (e)=>{\n        let {name, value} = e.target;\n        this.setState({...this.state, loanData: {...this.state.loanData, [name]: value}});\n    }\n\n\n    deleteCompany = async (companyId)=>{\n        await axios.delete('http://localhost:5000/loans/' + companyId);\n        let updatedCompanies = [...this.state.companies].filter(company=>company._id!==companyId);\n        this.setState({...this.state, companies: updatedCompanies});\n    }\n\n    inputUsed = (name)=>{\n        if(this.state.inputClicked[name]===false){\n            this.setState({...this.state, inputClicked: {...this.state.inputClicked, [name]: true}});\n        }\n    }\n\n    onBlurHandler = (e)=>{\n        let {name, value} = e.target;\n        this.inputUsed(name);\n        this.isFieldValid(name, value);\n    }\n\n    isFieldValid = (name, value)=>{\n        let validator = true;\n        if(value===\"\"){\n            validator = \"Please insert a value\";\n            this.setState({...this.state, inputValidated: {...this.state.inputValidated, [name]: validator}});\n            return\n        }\n\n        switch(name) {\n\n        case \"type\":\n            if(value===\"DEFAULT\"){\n                validator = \"Please choose a type\"\n            }\n            break;\n\n        case \"amount\":\n            console.log(name);\n            if(value < 15000){\n                validator = \"Please insert an amount greater than Â£15000\"\n            }\n            else if(value%1000!==0){\n                validator = \"Please insert an amount that is a multiple of 1000\"  \n            }   \n            break;     \n    }\n    this.setState({...this.state, inputValidated: {...this.state.inputValidated, [name]: validator}});\n}\n\nformValid = ()=>{\n    for (let key in this.state.inputValidated){\n        if(this.state.inputValidated[key]!==true){\n            return false;\n        }\n    }\n    return true;\n}\n\nchangeGraph=(e)=>{\n    switch (e.target.name){\n        case \"average\":\n            this.setState({...this.state, chartConfig: {...this.state.chartConfig, series: [{name: \"Averages\", data: this.state.calculationsData.averages}]}});\n            break;\n        case \"frequencyType\":\n            this.setState({...this.state, chartConfig: {...this.state.chartConfig, series: [{name: \"Frequencies\", data: this.state.calculationsData.frequencies}]}});\n            break;\n        default:\n            console.log(\"error\");       \n    }\n}\n\n\n  \n   \n    render(){\n\n        const { companyLoanDetails, setCompanyLoanDetails } = this.context\n        let companiesUI;\n    if(this.state.companies!==[]){\n        companiesUI = this.state.companies.map(company=>{\n            return <Company showLoanDetails={()=>showLoanDetails(company._id)} key={company._id} name = {company.name} deleteCompany={()=>this.deleteCompany(company._id)}>\n                {company.loans.map((loan)=> <LoanRequest amount={loan.amount} type={loan.type}/>)}\n            </Company>\n        })\n    }\n    const optionElements = [<option key=\"-1\" value=\"DEFAULT\" disabled>Loan Type</option>, loanTypes.map((loanType, index)=><option key={index} value={loanType}>{loanType}</option>)];\n\n    const showLoanDetails = (companyId)=>{\n        let clickedCompany = this.state.companies.find(company=> company._id===companyId);\n        setCompanyLoanDetails(clickedCompany);\n        this.props.history.push('/details');\n        \n    }\n\n    return(\n        <>\n        {JSON.stringify(this.state.inputValidated)}\n        <form onSubmit={(e)=>this.addLoan(e)} >\n            <InputAndError id=\"nameInput\" label=\"Name\" name=\"name\" value={this.state.loanData.name} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.name} inputClicked={this.state.inputClicked.name} inputValidated={this.state.inputValidated.name}/>\n            <InputAndError id=\"amountInput\" label=\"Amount\" name=\"amount\" value={this.state.loanData.amount} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.amount} inputClicked={this.state.inputClicked.amount} inputValidated={this.state.inputValidated.amount}/>\n            <SelectAndError id=\"loanType\" label=\"Type\" onBlur={(e)=>this.onBlurHandler(e)} required name=\"type\" value={this.state.loanData.type} onChange={(e)=>this.dropDownChangeHandler(e)} errorMessage={this.state.inputValidated.type} inputClicked={this.state.inputClicked.type} inputValidated={this.state.inputValidated.type}>\n                {optionElements}\n            </SelectAndError>\n            {this.state.loanData.type===\"Other\" ? \n            <InputAndError id=\"otherType\" label=\"Other Type\" name=\"otherType\" value={this.state.loanData.otherType} onChange={(e)=>this.onChangeHandler(e)} onBlur={(e)=>this.onBlurHandler(e)} errorMessage={this.state.inputValidated.otherType} inputClicked={this.state.inputClicked.otherType} inputValidated={this.state.inputValidated.otherType}/>\n            : null}\n            <button disabled={!this.formValid()}>Add Loan Request</button>\n        </form>\n        <div>\n            <h1>Businesses</h1>\n            \n            {this.state.companies!==[] ?\n            <> \n            <p>Click Business to Show Further Details</p>\n            <StyledUl>{companiesUI}</StyledUl>\n            </>\n             : <p>Currently no businesses</p>}\n        </div>\n            <div>\n                <div>\n                    <button name=\"average\" onClick={(e)=>this.changeGraph(e)}>Average of Each Loan Type</button>  \n                    <button name=\"frequencyType\" onClick={(e)=>this.changeGraph(e)}>Frequency of Each Loan Type</button>\n                    <button name=\"frequencyBands\">Frequency of Loans in Each Band</button>\n                </div>\n                <div className=\"app\">\n          <div className=\"row\">\n            <div className=\"mixed-chart\">\n              <Chart\n                options={this.state.chartConfig.options}\n                series={this.state.chartConfig.series}\n                type=\"bar\"\n                width=\"500\"\n              />\n            </div>\n          </div>\n        </div>\n            </div>\n        </>\n    )\n}; \n}\n\nexport default LoansAndData;"]},"metadata":{},"sourceType":"module"}